  #+BEGIN_SRC plantuml :file Variablebuilder.png
skinparam dpi 300
class VariableBuilderVisiter

abstract class ScriptObjectBuilder as "{abstract}\nScriptObjectBuilder"

ScriptObjectBuilder <|-- VariableBuilderVisiter

VariableBuilderVisiter : #addScriptObject(s:ScriptObject) : Go to error state
VariableBuilderVisiter : +getResult() : ScriptObject 
VariableBuilderVisiter : -obj:ScriptObject
VariableBuilderVisiter : -state:State = new NormalState
VariableBuilderVisiter : +VariableBuilder(ScriptObject)
VariableBuilderVisiter : +clone() : VariableBuilderVisiter

note bottom : The variable visiter is unlike most other visiters,\n it's made by the Variable token directly, and get result simply returns the obj it is paramaterized with. Adding anything to it sets it to error state, \n which will make it return an error obj instead...
note bottom : addScriptObject(s:ScriptObject) will just do state = state.addScriptObj() \n and getResult will return state.getResult(obj)
note bottom : Delegates getResult and addScriptObject to state. For getResult, the ScriptObject the Builder holds is added as a parameter, for addScriptObject, the ScriptObject is not passed along. 

abstract class State as "{abstract}\nState"
State : {abstract}getResult(s:ScriptObject) : ScriptObject
State : {abstract}addScriptObj() : State

VariableBuilderVisiter +-- State

class ErrorState 
ErrorState : getResults(s:ScriptObject) : ScriptObject
ErrorState : addScriptObj() : State 

note top : addScriptObj() always returns this \n getResults() always returns a new ErrorScriptObject

class NormalState 
NormalState : getResults(s:ScriptObject) : ScriptObject
NormalState : addScriptObj() : State 

State <|-- ErrorState
State <|-- NormalState

note top : addScriptObj() always returns new ErrorState() \n getResults() always returns an obj

  #+END_SRC

  #+RESULTS:
  [[file:Variablebuilder.png]]
