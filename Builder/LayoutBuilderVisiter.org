#+BEGIN_SRC plantuml :file LayoutBuilderVisiterTake2.png
skinparam dpi 300
class LayoutBuilderVisiter
LayoutBuilderVisiter : -state:State = new InitialState
LayoutBuilderVisiter : -setState(s:State)
LayoutBuilderVisiter : +addString(s:StringScriptWrapper)
LayoutBuilderVisiter : +addDecal(d:Decal)
LayoutBuilderVisiter : +addList(l:List)
LayoutBuilderVisiter : +addLayout(l:Layout)
LayoutBuilderVisiter : +addPositionScaled(ps:PositionScaled)
LayoutBuilderVisiter : +getResult()
LayoutBuilderVisiter : +addShape(s:Shape)
LayoutBuilderVisiter : #addScriptObject(s:ScriptObject)

LayoutBuilderVisiter +-- State

note top : Delegates methods to state that have same name, passing self as argument.

abstract class State as "{abstract}\nState"

State : +getResult(lb:LayoutBuilderVisiter)
State : +addString(s:StringScriptWrapper,lb:LayoutBuilderVisiter)
State : +addDecal(d:Decal,lb:LayoutBuilderVisiter)
State : +addList(l:List,lb:LayoutBuilderVisiter)
State : +addLayout(l:Layout,lb:LayoutBuilderVisiter)
State : +addPositionScaled(ps:PositionScaled,lb:LayoutBuilderVisiter)
State : #addScriptObject(s:ScriptObject,lb:LayoutBuilderVisiter)
State : +addShape(s:Shape,lb:LayoutBuilderVisiter)
State : #goToErrorState(lb:LayoutBuilderVisiter)
note top : goToErrorState : Set lb to new error state
note top : All methods have a default of calling goToErrorState, \n and get result will then do return lb.getState().getResult();

State <|-- InitialState


class InitialState
InitialState : +addString(s:StringScriptWrapper,lb:LayoutBuilderVisiter)
InitialState : +addDecal(d:Decal,lb:LayoutBuilderVisiter)
InitialState : +addList(l:List,lb:LayoutBuilderVisiter)
note top of InitialState
 addString : Wrap the string in a new DynamicDecal, with s as the key, call this d, and then do lb.addDecal(d)
 addDecal : set lb state to new LeafLayoutState, give decal d as paramater. 
 addList : set lb state to new CompositeLayoutAwaitingList.
  Then call on that new state s, s.addList(l,lb)
end note

abstract class CompositeLayoutState as "{abstract}\nCompositeLayoutState"
CompositeLayoutState : -pairs:List<LayoutTuple>
CompositeLayoutState : +end()
note top : end defaults to calling go to error state.

State <|-- CompositeLayoutState 

class CompositeLayoutHaveLayout
CompositeLayoutHaveLayout : - layout : ComponentLayout
CompositeLayoutHaveLayout : - addPositionScaled(sp:PositionScaled,lb:LayoutBuilderVisiter)
note top of CompositeLayoutHaveLayout
 addPositionScaled : Set lb state to CompositeLayoutHavePosition, giving layout, and ps as parameters
end note

class CompositeLayoutHavePosition
CompositeLayoutHavePosition : - layout : ComponentLayout
CompositeLayoutHavePosition : - pos : PositionScaled
CompositeLayoutHavePosition : +end()
CompositeLayoutHavePosition : +addShape(s:Shape,lb:LayoutBuilderVisiter)


note top of CompositeLayoutHavePosition
 addShape : set lb state to CompositeLayoutHaveAllItems, giving s, layout, pos  and supers pair list as arguments.
 end :  add new pair with given pos, layout, and use a square for default shape, and supers pair list as an argument.

By square, I mean a rectangle shape with equal sides.
end note

class CompositeLayoutAwaitingList
CompositeLayoutAwaitingList : -pairs:List<LayoutTuple>
CompositeLayoutAwaitingList : +getResult(lb:LayoutBuilderVisiter)
CompositeLayoutAwaitingList : +ddList(l:List,lb:LayoutBuilderVisiter)
note top of CompositeLayoutAwaitingList
 getResult : Return a new CompositeLayout, with the tuple list.
 addList : set lb state to new CompositeLayoutEmptyList, giving tuple list as parameter, then for each item in the list, do item.accept(lb). Upon finishing, set call lb.getState().end(), 
                 then set lb state back to this. 
end note

class CompositeLayoutEmptyVisitingList
CompositeLayoutEmptyVisitingList : +addLayout(l:Layout,lb:LayoutBuilderVisiter)
note top of CompositeLayoutEmptyVisitingList
 addLayout :  set lb state to new CompositeLayoutHaveLayoutState, giving tuple list + l as parameters. 

end note


CompositeLayoutState <|-- CompositeLayoutHavePosition
CompositeLayoutState <|-- CompositeLayoutHaveLayout
State <|-- CompositeLayoutAwaitingList
CompositeLayoutState <|-- CompositeLayoutEmptyVisitingList

class CompositeLayoutHaveAllItems
CompositeLayoutHaveAllItems : end()
note top : On construction, use the given layout, position, and shape to add to supers tuple list.
note top : end : Does nothing
  


CompositeLayoutState <|-- CompositeLayoutHaveAllItems





class LeafLayoutState
LeafLayoutState : -d : decal
LeafLayoutState : +getResult(lb:LayoutBuilderVisiter)
LeafLayoutState : +addString(s:StringScriptWrapper,lb:LayoutBuilderVisiter)
note top of LeafLayoutState
 getResult : Return new leaf-layout with the given decal.
 addString : If string is one of the given options, go to LeafLayoutWithOptionState, giving d, and s as parameters.
end note

State <|-- LeafLayoutState

class LeafLayoutWithOptionState
LeafLayoutWithOptionState : -d : decal
LeafLayoutWithOptionState : -option : String
LeafLayoutWithOptionState : +getResult(lb:LayoutBuilderVisiter)
note top of LeafLayoutWithOptionState
 getResult : Return new leaf-layout with the given decal, and option.
end note

State <|-- LeafLayoutWithOptionState


class ErrorState
ErrorState : goToErrorState(lb:LayoutBuilderVisiter)

State <|-- ErrorState

note top : goToErrorState : Already in error state, do nothing!



#+END_SRC

#+RESULTS:
[[file:LayoutBuilderVisiterTake2.png]]

