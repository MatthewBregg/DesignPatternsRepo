* Example UML

This should probably be split into multiple diagrams.
\newline
#+BEGIN_SRC plantuml :file CardStructureClasses.png
skinparam dpi 300

abstract class ScriptObject as "{abstract}\nScriptObject"
ScriptObject : {abstract}acceptBuilder(v : ScriptObjectBuilder) 

' CARD
class Card

Card : frontLayout : ComponentLayout
Card : backLayout : ComponentLayout
Card : name : String
Card : width : double
Card : height : double
note top : Background will either be a leaf layout, or special background decal holder.

'Position/Size
class PositionScaled
class Size
Size : width : double
Size : height : double
PositionScaled : xPercentage : double
PositionScaled : yPercentage : double
PositionScaled : widthPercentage : double
PositionScaled : heightPercentage : double


' Family
class Family
note top : A family map may be nested, so the object has a Family reference in it, it check itself, if null, check reference.
Family : name : String
Family : familyMap : Map<String,Decal>
Family : getDecal(s : String)
Family : setDecal(s : String, d : Decal )

'Decals
abstract class Decal as "{abstract}\nDecal"
Decal : {abstract}render(families : ArrayList<Family>, size Size ) : Image

class ImageDecal
note left : Will likely wind up being an adapter to javas image class.
ImageDecal : image : Image
ImageDecal : load(Path path) 

class Text
Text : font : Path
Text : color : Color
Text : size : int

class DynamicDecal
note bottom : Is a smart reference proxy, looks up correct decal in map. 
DynamicDecal : key : String
abstract class Shape as "{abstract}\nShape"

class Rectangle
Rectangle : width : double
Rectangle : height : double
class Circle
Circle : radius : double
class Triangle
Triangle : ALength : double
Triangle : BLength : double
Triangle : CLength : double
class AnyShape
AnyShape : points : ArrayList<Point>
note top : Connects each point to the next point in the list, and then connect the last point to the first one



' Decal relations
Decal <|-- ImageDecal
Decal <|-- Text
Decal <|-- DynamicDecal
Decal <|-- Shape
Shape <|-- Rectangle
Shape <|-- Triangle
Shape <|-- Circle
Shape <|-- AnyShape


'Layouts

class LayoutPositionPair
LayoutPositionPair : layout : ComponentLayout
LayoutPositionPair : position : PositionScaled
LayoutPositionPair : getLayout() : ComponentLayout
LayoutPositionPair : getPostionScaled() : PositionScaled
abstract class Layout as "{abstract}\nComponentLayout"
note top : Render is abstract, a leaf layout will just forward the render to it's decal. Render will probably return an image.
class CompositeLayout
note top :  A ComponentLayout needs to call render on it's children, and assemble that into one image. See render section for more on that. Implementors of composite layout ellided in this uml.
class LeafLayout
note bottom : Forwards render to decal, after getting the correct size.
LeafLayout : Decal
Layout <|-- LeafLayout 
Layout <|-- CompositeLayout
LayoutPositionPair --o CompositeLayout: 1 - N
LayoutPositionPair o-- Layout : 1
LayoutPositionPair o- PositionScaled : 1

Layout : {abstract}render(families : ArrayList<Family>, position : PositionScaled, size : Size) : Image
Layout : {abstract}removeLayout(l : LayoutPositionPair) : LayoutPositionPair
Layout : {abstract}iterator() : Iterator<LayoutPositionPair>

CompositeLayout : addLayout(l : LayoutPositionPair)

Card --> Layout

LeafLayout-> Decal

'Script Object
ScriptObject <|-- Family
ScriptObject <|-- Layout
ScriptObject <|-- Decal
ScriptObject <|-- Card


#+END_SRC

#+RESULTS:
[[file:CardStructureClasses.png]]

- Some patterns used here
  - Proxy : the dynamicdecal
  - Composite : The layouts
  - Adapter : Image Decal
  - Iterator : For the composite 

