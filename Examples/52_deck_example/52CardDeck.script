//------------------------------------------------------
//size(in pixels) of the card
//------------------------------------------------------
(define cardSize (size 70 100))


//------------------------------------------------------
//back image of the card
//------------------------------------------------------
(define cardBackImage (image "cardBack.jpg"))

//------------------------------------------------------
//suit images
//------------------------------------------------------
(define spadeImage (image "spadeImage.jpg"))
(define heartImage (image "heartImage.jpg"))
(define diamondImage (image "diamondImage.jpg"))
(define clubImage (image "clubImage.jpg"))

//------------------------------------------------------
//all face card images
//------------------------------------------------------
(define jackHeartImage (image "jackHeart.jpg"))
(define queenHeartImage (image "queenHeart.jpg"))
(define kingHeartImage (image "kingHeart.jpg"))
(define jackDiamondImage (image "jackDiamond.jpg"))
(define queenDiamondImage (image ("queenDiamond.jpg"))
(define kingDiamondImage (image ("kingDiamond.jpg"))
(define jackSpadeImage (image ("jackSpade.jpg"))
(define queenSpadeImage (image ("queenSpade.jpg"))
(define kingSpadeImage (image ("kingSpade.jpg"))
(define jackClubImage (image ("jackClub.jpg"))
(define queenClubImage (image ("queenClub.jpg"))
(define kingClubImage (image ("kingClub.jpg"))

//------------------------------------------------------
//shape of card
//------------------------------------------------------
(define whiteRectangle (rectangle 0x000000 70 100 ))

//------------------------------------------------------
//relative positions and card size
//------------------------------------------------------
(define wholeCard (position-scaled 0 0 100 100)) 
(define numberTopLeft (position-scaled 5 5 5 5))
(define numberBotRight (position-scaled 85 90 5 5)) 
(define suitTopLeft (position-scaled 10 5 5 5)) 
(define suitBotRight (position-scaled 90 90 5 5)) 

//..Moreposiitons

//------------------------------------------------------
//family for all 4 suits
//------------------------------------------------------
(define HeartFamily (family (cons "suit" heartImage)
                            (cons "jackImage" jackHeartImage)
                            (cons "queenImage" queenHeartImage)
                            (cons "kingImage" kingHeartImage)))
(define DiamondFamily (family (cons "suit" diamondImage )
                              (cons "jackImage" jackDiamondImage)
                              (cons "queenImage" queenDiamondImage)
                              (cons "kingImage" kingDiamondImage)))
(define SpadeFamily (family (cons "suit" spadeImage)
                            (cons "jackImage" jackSpadeImage)
                            (cons "queenImage" queenSpadeImage)
                            (cons "kingImage" kingSpadeImage)))
(define ClubFamily (family (cons "suit" clubImage)
                           (cons "jackImage" jackClubImage)
                           (cons "queenImage" queenClubImage)
                           (cons "kingImage" kingClubImage)))

//------------------------------------------------------
//base layouts for all the cards
//------------------------------------------------------
(define (cardBackLayout)
  (layout
  (cons (layout whiteRectangle wholeCard))
  (cons (layout cardBack (position-scaled 5,5,90,90)))))
(define (backgroundLayout value color) 
  (layout 
  (cons (layout whiteRectangle wholeCard))
  (cons (layout "suit" suitTopLeft))
  (cons (layout "suit" suitBotRight))
  (cons (layout (string value "arial" color 12)))))

(define (aceLayout value color)
  (layout 
  (cons (backGroundLayout value color) wholeCard)
  (cons (leaf-layout "suit") center)))

(define (twoLayout value color)
  (layout 
  (cons (backGroundLayout value color) wholeCard)
  (cons (layout "suit") center-2-1)
  (cons (layout "suit") center-2-2)))

(define (threeLayout value color)
  (layout 
  (cons (backGroundLayout value color) wholeCard)
  (cons (layout "suit") center-3-1)
  (cons (layout "suit") center-3-2)
  (cons (layout "suit") center-3-3)))

(define (fourLayout value color)
  (layout 
  (cons (backGroundLayout value color) wholeCard)
  (cons (layout "suit") center-4-1)
  (cons (layout "suit") center-4-2)
  (cons (layout "suit") center-4-3)
  (cons (layout "suit") center-4-4)))

(define (fiveLayout value color)
  (layout 
  (cons (backGroundLayout value color) wholeCard)
  (cons (layout "suit") center-5-1)
  (cons (layout "suit") center-5-2)
  (cons (layout "suit") center-5-3)
  (cons (layout "suit") center-5-4)
  (cons (layout "suit") center-5-5)))

(define (sixLayout value color)
  (layout 
  (cons (backGroundLayout value color) wholeCard)
  (cons (layout "suit") center-6-1)
  (cons (layout "suit") center-6-2)
  (cons (layout "suit") center-6-3)
  (cons (layout "suit") center-6-4)
  (cons (layout "suit") center-6-5)
  (cons (layout "suit") center-6-6)))

(define (sevenLayout value color)
  (layout 
  (cons (backGroundLayout value color) wholeCard)
  (cons (layout "suit") center-7-1)
  (cons (layout "suit") center-7-2)
  (cons (layout "suit") center-7-3)
  (cons (layout "suit") center-7-4)
  (cons (layout "suit") center-7-5)
  (cons (layout "suit") center-7-6)
  (cons (layout "suit") center-7-7)))

(define (eightLayout value color)
  (layout 
  (cons (backGroundLayout value color) wholeCard)
  (cons (layout "suit") center-8-1)
  (cons (layout "suit") center-8-2)
  (cons (layout "suit") center-8-3)
  (cons (layout "suit") center-8-4)
  (cons (layout "suit") center-8-5)
  (cons (layout "suit") center-8-6)
  (cons (layout "suit") center-8-7)
  (cons (layout "suit") center-8-8)))

(define (nineLayout value color)
  (layout 
  (cons (backGroundLayout value color) wholeCard)
  (cons (layout "suit") center-9-1)
  (cons (layout "suit") center-9-2)
  (cons (layout "suit") center-9-3)
  (cons (layout "suit") center-9-4)
  (cons (layout "suit") center-9-5)
  (cons (layout "suit") center-9-6)
  (cons (layout "suit") center-9-7)
  (cons (layout "suit") center-9-8)
  (cons (layout "suit") center-9-9)))

(define (tenLayout value color)
  (layout 
  (cons (backGroundLayout value color) wholeCard)
  (cons (layout "suit") center-10-1)
  (cons (layout "suit") center-10-2)
  (cons (layout "suit") center-10-3)
  (cons (layout "suit") center-10-4)
  (cons (layout "suit") center-10-5)
  (cons (layout "suit") center-10-6)
  (cons (layout "suit") center-10-7)
  (cons (layout "suit") center-10-8)
  (cons (layout "suit") center-10-9)
  (cons (layout "suit") center-10-10)))

(define (jackLayout  value color)
  (layout 
  (cons (backGroundLayout value color) wholeCard)
  (cons (layout "jackImage") centerFace)))

(define (queenLayout  value color)
  (layout 
  (cons (backGroundLayout value color) wholeCard)
  (cons (layout "queenImage") centerFace)))

(define (kingLayout  value color)
  (layout 
  (cons (backGroundLayout value color) wholeCard)
  (cons (layout "kingImage") centerFace)))

//------------------------------------------------------
//cards   
//------------------------------------------------------
(define blackAceCard (card cardSize "blackAce" (aceLayout "A" 0x000000) cardBackLayout))
(define blackTwoCard (card cardSize "blackTwo" (aceLayout "2" 0x000000) cardBackLayout))
(define blackThreeCard (card cardSize "blackThree" (aceLayout "3" 0x000000) cardBackLayout))
(define blackFourCard (card cardSize "blackFour" (aceLayout "4" 0x000000) cardBackLayout))
(define blackFiveCard (card cardSize "blackFive" (aceLayout "5" 0x000000) cardBackLayout))
(define blackSixCard (card cardSize "blackSix" (aceLayout "6" 0x000000) cardBackLayout))
(define blackSevenCard (card cardSize "blackSeven" (aceLayout "7" 0x000000) cardBackLayout))
(define blackEightCard (card cardSize "blackEight" (aceLayout "8" 0x000000) cardBackLayout))
(define blackNineCard (card cardSize "blackNine" (aceLayout "9" 0x000000) cardBackLayout))
(define blackTenCard (card cardSize "blackTen" (aceLayout "10" 0x000000) cardBackLayout))
(define blackJackCard (card cardSize "blackJack" (aceLayout "J" 0x000000) cardBackLayout))
(define blackQueenCard (card cardSize "blackQueen" (aceLayout "Q" 0x000000) cardBackLayout))
(define blackKingCard (card cardSize "blackKing" (aceLayout "K" 0x000000) cardBackLayout))

(define redAceCard (card cardSize "redAce" (aceLayout "A" #DD311D) cardBackLayout))
(define redTwoCard (card cardSize "redTwo" (aceLayout "2" #DD311D) cardBackLayout))
(define redThreeCard (card cardSize "redThree" (aceLayout "3" #DD311D) cardBackLayout))
(define redFourCard (card cardSize "redFour" (aceLayout "4" #DD311D) cardBackLayout))
(define redFiveCard (card cardSize "redFive" (aceLayout "5" #DD311D) cardBackLayout))
(define redSixCard (card cardSize "redSix" (aceLayout "6" #DD311D) cardBackLayout))
(define redSevenCard (card cardSize "redSeven" (aceLayout "7" #DD311D) cardBackLayout))
(define redEightCard (card cardSize "redEight" (aceLayout "8" #DD311D) cardBackLayout))
(define redNineCard (card cardSize "redNine" (aceLayout "9" #DD311D) cardBackLayout))
(define redTenCard (card cardSize "redTen" (aceLayout "10" #DD311D) cardBackLayout))
(define redJackCard (card cardSize "redJack" (aceLayout "J" #DD311D) cardBackLayout))
(define redQueenCard (card cardSize "redQueen" (aceLayout "Q" #DD311D) cardBackLayout))
(define redKingCard (card cardSize "redKing" (aceLayout "K" #DD311D) cardBackLayout))

//------------------------------------------------------
//makes the subDeck of 13 cards, for each color
//------------------------------------------------------
(define redSubDeck (list redAceCard redTwoCard redThreeCard redFourCard redFiveCard redSixCard redSevenCard 
                          redEightCard redNineCard redTenCard redJackCard redQueenCard redKingCard ))
(define blackSubDeck (list blackAceCard blackTwoCard blackThreeCard blackFourCard blackFiveCard blackSixCard blackSevenCard 
                          blackEightCard blackNineCard blackTenCard blackJackCard blackQueenCard blackKingCard ))

//------------------------------------------------------
//renders the subdeck 4 times for each suit
//------------------------------------------------------
(render redSuitSubDeck heartFamily)
(render redSuitSubDeck diamondFamily)
(render blackSuitSubDeck clubFamily)
(render BlackSuitSubDeck spadeFamily)