;;------------------------------------------------------
;;size(in pixels) of the card
;;------------------------------------------------------
(define cardSize (size 70 100))


;;------------------------------------------------------
;;back image of the card
;;------------------------------------------------------
(define cardBackImage (image "cardBack.png"))

;;------------------------------------------------------
;;suit images
;;------------------------------------------------------
(define spadeImage (image "spadeImage.png"))
(define heartImage (image "heartImage.png"))
(define diamondImage (image "diamondImage.png"))
(define clubImage (image "clubImage.png"))

;;------------------------------------------------------
;;all face card images
;;------------------------------------------------------
(define jackHeartImage (image "jackHeart.png"))
(define queenHeartImage (image "queenHeart.png"))
(define kingHeartImage (image "kingHeart.png"))
(define jackDiamondImage (image "jackDiamond.png"))
(define queenDiamondImage (image ("queenDiamond.png"))
(define kingDiamondImage (image ("kingDiamond.png"))
(define jackSpadeImage (image ("jackSpade.png"))
(define queenSpadeImage (image ("queenSpade.png"))
(define kingSpadeImage (image ("kingSpade.png"))
(define jackClubImage (image ("jackClub.png"))
(define queenClubImage (image ("queenClub.png"))
(define kingClubImage (image ("kingClub.png"))

;;------------------------------------------------------
;;shape of card
;;------------------------------------------------------
(define whiteRectangle (rectangle #FFFFFF 70 100 ))

;;------------------------------------------------------
;;relative positions and card size
;;------------------------------------------------------
(define wholeCard (position-scaled 0 0 100 100)) 
(define numberTopLeft (position-scaled 5 5 5 5))
(define numberBotRight (position-scaled 85 85 5 5)) 
(define suitTopLeft (position-scaled 5 10 5 5)) 
(define suitBotRight (position-scaled 85 90 5 5)) 
(define centerFace (position-scaled 10 5 75 90)) 

;;------------------------------------------------------
;;family for all 4 suits
;;------------------------------------------------------
(define HeartFamily (family (cons "suit" heartImage)
                            (cons "jackImage" jackHeartImage)
                            (cons "queenImage" queenHeartImage)
                            (cons "kingImage" kingHeartImage)))
(define DiamondFamily (family (cons "suit" diamondImage )
                              (cons "jackImage" jackDiamondImage)
                              (cons "queenImage" queenDiamondImage)
                              (cons "kingImage" kingDiamondImage)))
(define SpadeFamily (family (cons "suit" spadeImage)
                            (cons "jackImage" jackSpadeImage)
                            (cons "queenImage" queenSpadeImage)
                            (cons "kingImage" kingSpadeImage)))
(define ClubFamily (family (cons "suit" clubImage)
                           (cons "jackImage" jackClubImage)
                           (cons "queenImage" queenClubImage)
                           (cons "kingImage" kingClubImage)))

;;------------------------------------------------------
;;base layouts for all the cards
;;------------------------------------------------------
(define (cardBackLayout)
  (layout
  (cons (layout whiteRectangle wholeCard))
  (cons (layout cardBack (position-scaled 5 5 90 90)))))
(define (backgroundLayout value color) 
  (layout 
  (cons (layout whiteRectangle wholeCard))
  (cons (layout "suit" suitTopLeft))
  (cons (layout "suit" suitBotRight))
  (cons (layout (string value "arial" color 12)))))

(define (aceLayout value color)
  (layout 
  (cons (backGroundLayout value color) wholeCard)
  (cons (layout "suit") (position-scaled 40 40 20 20)))

(define (twoLayout value color)
  (layout 
  (cons (backGroundLayout value color) wholeCard)
  (cons (layout "suit" (position-scaled 45 15 10 10)))
  (cons (layout "suit" (position-scaled 45 75 10 10)))))

(define (threeLayout value color)
  (layout 
  (cons (backGroundLayout value color) wholeCard)
  (cons (layout "suit" (position-scaled 45 15 10 10)))
  (cons (layout "suit" (position-scaled 45 45 10 10)))
  (cons (layout "suit" (position-scaled 45 75 10 10)))))

(define (fourLayout value color)
  (layout 
  (cons (backGroundLayout value color) wholeCard)
  (cons (layout "suit" (position-scaled 25 15 10 10)))
  (cons (layout "suit" (position-scaled 65 15 10 10)))
  (cons (layout "suit" (position-scaled 25 75 10 10)))
  (cons (layout "suit" (position-scaled 65 75 10 10)))))

(define (fiveLayout value color)
  (layout 
  (cons (backGroundLayout value color) wholeCard)
  (cons (layout "suit" (position-scaled 25 15 10 10)))
  (cons (layout "suit" (position-scaled 65 15 10 10)))
  (cons (layout "suit" (position-scaled 25 75 10 10)))
  (cons (layout "suit" (position-scaled 65 75 10 10)))    
  (cons (layout "suit" (position-scaled 45 45 10 10)))))


(define (sixLayout value color)
  (layout 
  (cons (backGroundLayout value color) wholeCard)
  (cons (backGroundLayout value color) wholeCard)
  (cons (layout "suit" (position-scaled 25 15 10 10)))
  (cons (layout "suit" (position-scaled 65 15 10 10)))
  (cons (layout "suit" (position-scaled 25 45 10 10)))
  (cons (layout "suit" (position-scaled 65 45 10 10)))
  (cons (layout "suit" (position-scaled 25 75 10 10)))
  (cons (layout "suit" (position-scaled 65 75 10 10)))))

(define (sevenLayout value color)
  (layout 
  (cons (backGroundLayout value color) wholeCard)
  (cons (layout "suit" (position-scaled 25 15 10 10)))
  (cons (layout "suit" (position-scaled 65 15 10 10)))
  (cons (layout "suit" (position-scaled 25 45 10 10)))
  (cons (layout "suit" (position-scaled 65 45 10 10)))
  (cons (layout "suit" (position-scaled 25 75 10 10)))
  (cons (layout "suit" (position-scaled 65 75 10 10)))
  (cons (layout "suit" (position-scaled 45 65 10 10)))))

(define (eightLayout value color)
  (layout 
  (cons (backGroundLayout value color) wholeCard)
  (cons (backGroundLayout value color) wholeCard)
  (cons (layout "suit" (position-scaled 25 15 10 10)))
  (cons (layout "suit" (position-scaled 65 15 10 10)))
  (cons (layout "suit" (position-scaled 25 45 10 10)))
  (cons (layout "suit" (position-scaled 65 45 10 10)))
  (cons (layout "suit" (position-scaled 25 75 10 10)))
  (cons (layout "suit" (position-scaled 65 75 10 10)))
  (cons (layout "suit" (position-scaled 65 45 10 10)))
  (cons (layout "suit" (position-scaled 45 65 10 10)))))

(define (nineLayout value color)
  (layout 
  (cons (backGroundLayout value color) wholeCard)
  (cons (layout "suit" (position-scaled 25 15 10 10)))
  (cons (layout "suit" (position-scaled 65 15 10 10)))
  (cons (layout "suit" (position-scaled 25 35 10 10)))
  (cons (layout "suit" (position-scaled 65 35 10 10)))
  (cons (layout "suit" (position-scaled 25 55 10 10)))
  (cons (layout "suit" (position-scaled 65 55 10 10)))
  (cons (layout "suit" (position-scaled 25 75 10 10)))
  (cons (layout "suit" (position-scaled 65 75 10 10)))
  (cons (layout "suit" (position-scaled 45 45 10 10)))))

(define (tenLayout value color)
  (layout 
  (cons (backGroundLayout value color) wholeCard)
  (cons (layout "suit" (position-scaled 25 15 10 10)))
  (cons (layout "suit" (position-scaled 65 15 10 10)))
  (cons (layout "suit" (position-scaled 25 35 10 10)))
  (cons (layout "suit" (position-scaled 65 35 10 10)))
  (cons (layout "suit" (position-scaled 25 55 10 10)))
  (cons (layout "suit" (position-scaled 65 55 10 10)))
  (cons (layout "suit" (position-scaled 25 75 10 10)))
  (cons (layout "suit" (position-scaled 65 75 10 10)))
  (cons (layout "suit" (position-scaled 45 25 10 10)))
  (cons (layout "suit" (position-scaled 45 65 10 10)))))

(define (jackLayout  value color)
  (layout 
  (cons (backGroundLayout value color) wholeCard)
  (cons (layout "jackImage") centerFace)))

(define (queenLayout  value color)
  (layout 
  (cons (backGroundLayout value color) wholeCard)
  (cons (layout "queenImage") centerFace)))

(define (kingLayout  value color)
  (layout 
  (cons (backGroundLayout value color) wholeCard)
  (cons (layout "kingImage") centerFace)))

;;------------------------------------------------------
;;cards   
;;------------------------------------------------------
(define blackAceCard
  (card cardSize "blackAce" (aceLayout "A" #000000) cardBackLayout))
(define blackTwoCard
  (card cardSize "blackTwo" (twoLayout "2" #000000) cardBackLayout))
(define blackThreeCard
  (card cardSize "blackThree" (threeLayout "3" #000000) cardBackLayout))
(define blackFourCard
  (card cardSize "blackFour" (fourLayout "4" #000000) cardBackLayout))
(define blackFiveCard
  (card cardSize "blackFive" (fiveLayout "5" #000000) cardBackLayout))
(define blackSixCard
  (card cardSize "blackSix" (sixLayout "6" #000000) cardBackLayout))
(define blackSevenCard
  (card cardSize "blackSeven" (sevenLayout "7" #000000) cardBackLayout))
(define blackEightCard
  (card cardSize "blackEight" (eightLayout "8" #000000) cardBackLayout))
(define blackNineCard
  (card cardSize "blackNine" (nineLayout "9" #000000) cardBackLayout))
(define blackTenCard
  (card cardSize "blackTen" (tenLayout "10" #000000) cardBackLayout))
(define blackJackCard
  (card cardSize "blackJack" (jackLayout "J" #000000) cardBackLayout))
(define blackQueenCard
  (card cardSize "blackQueen" (queenLayout "Q" #000000) cardBackLayout))
(define blackKingCard
  (card cardSize "blackKing" (kingLayout "K" #000000) cardBackLayout))

(define redAceCard
  (card cardSize "redAce" (aceLayout "A" #DD311D) cardBackLayout))
(define redTwoCard
  (card cardSize "redTwo" (twoLayout "2" #DD311D) cardBackLayout))
(define redThreeCard
  (card cardSize "redThree" (threeLayout "3" #DD311D) cardBackLayout))
(define redFourCard
  (card cardSize "redFour" (fourLayout "4" #DD311D) cardBackLayout))
(define redFiveCard
  (card cardSize "redFive" (fiveLayout "5" #DD311D) cardBackLayout))
(define redSixCard
  (card cardSize "redSix" (sixLayout "6" #DD311D) cardBackLayout))
(define redSevenCard
  (card cardSize "redSeven" (sevenLayout "7" #DD311D) cardBackLayout))
(define redEightCard
  (card cardSize "redEight" (eightLayout "8" #DD311D) cardBackLayout))
(define redNineCard
  (card cardSize "redNine" (nineLayout "9" #DD311D) cardBackLayout))
(define redTenCard
  (card cardSize "redTen" (tenLayout "10" #DD311D) cardBackLayout))
(define redJackCard
  (card cardSize "redJack" (jackLayout "J" #DD311D) cardBackLayout))
(define redQueenCard
  (card cardSize "redQueen" (queenLayout "Q" #DD311D) cardBackLayout))
(define redKingCard
  (card cardSize "redKing" (kingLayout "K" #DD311D) cardBackLayout))

;;------------------------------------------------------
;;makes the subDeck of 13 cards, for each color
;;------------------------------------------------------
(define redSubDeck (list redAceCard redTwoCard redThreeCard redFourCard
                         redFiveCard redSixCard redSevenCard 
                          redEightCard redNineCard redTenCard redJackCard
                          redQueenCard redKingCard ))
(define blackSubDeck (list blackAceCard blackTwoCard blackThreeCard blackFourCard
                           blackFiveCard blackSixCard blackSevenCard 
                          blackEightCard blackNineCard blackTenCard blackJackCard
                          blackQueenCard blackKingCard ))

;;------------------------------------------------------
;;renders the subdeck 4 times for each suit
;;------------------------------------------------------
(render redSuitSubDeck heartFamily)
(render redSuitSubDeck diamondFamily)
(render blackSuitSubDeck clubFamily)
(render blackSuitSubDeck spadeFamily)
