* Overview of Scripting Language
For the scripting language, we have choosen a lisp style language.
While far from a complete lisp, it has a syntax similar to scheme, and could easily be extended, without breaking existing scripts.

** Built in functions
*** define
#+BEGIN_SRC scheme
(define name value)
(define fooConstant 3)
#+END_SRC
Assigns to the name the given value.
This version does support defining functions atm.
(See http://www.scheme.com/tspl2d/binding.html)
- Right now, defines may not be nested, and must be done at top level.
- A variable name can't start with a number, to make it determinable from an int atom.
  - It must start with an alpha character.
    
*** concat-string
Takes in n string, or numbers, returns one string of all those concattenated
#+BEGIN_SRC 
(concat-string "foo" 3 "bar")
(concat-string "Foo" "bar")

#+END_SRC
*** cons
Takes two arguments, returns a pair holding the two arguments as one object
#+BEGIN_SRC scheme
(cons a b)
(cons 1 2)
#+END_SRC
(See http://download.plt-scheme.org/doc/4.2.4/html/guide/Pairs__Lists__and_Scheme_Syntax.html)
*** card
Takes a card-size, name, and two layouts, one for the front, one for the back.
#+BEGIN_SRC scheme
(card card-size "name" frontLayout backLayout)
#+END_SRC
When a card is rendered, it will pair the layout with the wholeCard position-scaled (0 0 100 100)

*** render
Takes in a single card, a list of cards, or a pair of cards, and 0-n families.
Renders them.
#+BEGIN_SRC scheme
(render card family)
(render cards family)
(render (cons carda cardb) family)
(render some-cards family0 ... familyn-1)
#+END_SRC

Note: The family is an optional argument, leaving it empty is the same as calling
#+BEGIN_SRC scheme
(render cards (family))

#+END_SRC
Which runs render with an empty family.
*** list
Takes in a n arguments, and returns a list of them. 
#+BEGIN_SRC scheme
(list N0 ... Nn-1)
(list 1 2 3 4 5 6 7)
#+END_SRC
*** position-scaled
Takes in a x-offset%, y-offset%, and a scale-width% and scale-height%, and returns a position-scaled object. 
- The two scale arguments are optional, default to 100.
#+BEGIN_SRC scheme
(position-scaled x-offset% y-offset% scale-width% scale-height%)
(position-scaled 0 0 50 50)
(define wholeCard (position-scaled 0 0 100 100))
#+END_SRC
*** leaf-layout
Returns a layout.
Takes in a decal, or a string.
In the event a string is given, the decal will be looked up in the family.
This layout can then be used with the above layout function.
#+BEGIN_SRC scheme
(layout image)
(layout foobarImage)
(layout "foo")
#+END_SRC
**** Leaf-Layout options
A Leaf-Layout can be given a third argument, to determine some extra behavior.
Takes an extra parameter, either a W, or an H, A, or O.
- If W, width will be at most maximimum width of an image.
- If H, height will be at most, maximum height of given image
- If A, the original aspect ratio will be maintained.
- If O, original size will be mantained. 
- IF S, stretch to fit.
- All the options aside S, which does need to, will add transparent padding to return a 
  size render desires.
- The default is "S", so calling with the "S" argument is the same as not having a third argument
*** layout
Creates a Layout object.
A layout contains 0-n pairs of layouts and position-scaleds.
Takes 0-n pairs of layouts and position-scaleds as arguments.
#+BEGIN_SRC scheme
(Layout
  (cons layout0 position-scaled0)
  (cons layout1 position-scaled1)
  ...
  (cons layoutn-1 position-scaledn-1))

(Layout 
  (cons layoutFoo position-scaledFoo)
  (cons (layout foobarImage) wholeCard)
  (cons (layout "foo") wholeCard)
)

#+END_SRC
*** family
Creates a map of strings to decals, a family.
Takes in a name, and N pairs.
- Requires a family name.
  - The family name is added to the card name when a card is rendered, to avoid name collisions when rendering the same card with multiple families.
  - If a multiple families given, append the names of all the families.

#+BEGIN_SRC family
(family name pair0 ... pairn-1)
(family "fooFamily" (cons "foo" fooImage) (cons "bar" barImage))

#+END_SRC
*** eval-file
Takes in n filepaths, evals each file in given order
#+BEGIN_SRC scheme
(eval-file "filename.filename")
(eval-file "foo.script")
(eval-file "foo.script" "bar.script")
#+END_SRC
Evals foo.script.
Returns null.





*** Decals

- Image Decal
#+BEGIN_SRC 
(image "filepath.[jpg|png|etc]")
(image "foo.jpg")
#+END_SRC
- Rectangle Decal
#+BEGIN_SRC 
(rectangle "color" width height)
(rectangle "white" 100 200) 
#+END_SRC
- Triangle Decal
#+BEGIN_SRC 
(triangle "color" lengthA lengthB lengthC)
(triangle "white" 100 200 300)
#+END_SRC
- AnyShape Decal
  - Connect point0 -> point1, and then pointn-1 -> point0 to make a shape
#+BEGIN_SRC 
(any-shape "color" point0x point0y point1x point1y ... pointn-1x pointn-1y)
(any-shape "white" 100 100 200 200 300 300)

#+END_SRC
- Circle Decal
#+BEGIN_SRC 
(circle "color" radius)
(Circle "white" 100)
#+END_SRC
- String decal
A string from a given font.
#+BEGIN_SRC 
(string "StringText" "Font" "Color" Size)
(string "Hello World!" "Arial.font" "Red" 12)
(string "1" "Arial.font" "Red" 12)
#+END_SRC
*** Position-Scaleds
A position-scaled that can be used in the script
#+BEGIN_SRC 
(position-scaled x-offset% y-offset% scale-width% scale-height%)
(position-scaled 0 0 100 100) 
#+END_SRC

*** Size
A size is used by a card to determine how many pixels it will be.
#+BEGIN_SRC 
(size width height)
#+END_SRC



* Config file
- Allows one to set various options
- Current options are 
  - script-file
    - Specify the script to run
    - No default, can be overridden by terminal args
  - output-format
    - Specify what format to output in
    - Defaults to png
  - output-file
    - Specify where to output the result to
    - Defaults to ./
  - logfile
    - Specify where to log to
    - Defaults to .cardlog
      
- Each option is enter in this format
#+BEGIN_SRC 
(set-option "option-name" "value")
#+END_SRC
-So for example
#+BEGIN_SRC 
(set-option "output-dir" "./")
#+END_SRC
