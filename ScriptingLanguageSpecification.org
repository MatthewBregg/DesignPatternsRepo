* Scripting Language Specifications/Overview
For the scripting language, we have choosen a lisp style language.
While far from a complete lisp, it has a syntax similar to scheme, and could easily be extended, without breaking existing scripts.

** Built in functions
*** define
#+BEGIN_SRC scheme
(define name value)
(define fooConstant 3)
(define (sqr x) (* x x))
#+END_SRC
Assigns to the name the given value.
This version does support defining functions atm.
(See http://www.scheme.com/tspl2d/binding.html)
- Right now, defines may be nested.
- A variable name can't start with a number, to make it determinable from an int atom.
  - It must start with an alpha character.
    
*** Basic number ops
Basic number ops, including +,-,/,*,^.
Takes in two args, returns a third with the value. 
#+BEGIN_SRC 
(+ 1 2)
(- 1 2)
(* 1 2)
(/ 1 2)
(^ 1 2)
#+END_SRC
    
*** concat-string
Takes in n string, or numbers, returns one string of all those concattenated
#+BEGIN_SRC 
(concat-string "foo" 3 "bar")
(concat-string "Foo" "bar")

#+END_SRC
*** cons
Takes two arguments, returns a pair holding the two arguments as one object
#+BEGIN_SRC scheme
(cons a b)
(cons 1 2)
#+END_SRC
(See http://download.plt-scheme.org/doc/4.2.4/html/guide/Pairs__Lists__and_Scheme_Syntax.html)
*** card
Takes a card-size, name, and two layouts, one for the front, one for the back, and then the shape of the card.
#+BEGIN_SRC scheme
(card card-size "name" frontLayout backLayout shape)
#+END_SRC
When a card is rendered, it will pair the layout with the wholeCard position-scaled (0 0 100 100)

*** render
Takes in a single card, a list of cards, or a pair of cards, and 0-n families.
Renders them.
#+BEGIN_SRC scheme
(render card family)
(render cards family)
(render (cons carda cardb) family)
(render some-cards family0 ... familyn-1)
#+END_SRC

Note: The family is an optional argument, leaving it empty is the same as calling
#+BEGIN_SRC scheme
(render cards (family))

#+END_SRC
Which runs render with an empty family.
*** list
Takes in a n arguments, and returns a list of them. 
#+BEGIN_SRC scheme
(list N0 ... Nn-1)
(list 1 2 3 4 5 6 7)
#+END_SRC
*** position-scaled
Takes in a x-offset%, y-offset%, and a scale-width% and scale-height%, and returns a position-scaled object. 
- The two scale arguments are optional, default to 100.
#+BEGIN_SRC scheme
(position-scaled x-offset% y-offset% scale-width% scale-height%)
(position-scaled 0 0 50 50)
(define wholeCard (position-scaled 0 0 100 100))
#+END_SRC
*** leaf-layout
Returns a layout.
Takes in a decal, or a string.
In the event a string is given, the decal will be looked up in the family.
This layout can then be used with the above layout function.
#+BEGIN_SRC scheme
(layout image)
(layout foobarImage)
(layout "foo")
(layout (color-decal "white"))
#+END_SRC
**** Leaf-Layout options
A Leaf-Layout can be given a third argument, to determine some extra behavior.
Takes an extra parameter, either a W, or an H, A, or O.
- If W, width will be at most maximimum width of an image.
- If H, height will be at most, maximum height of given image
- If A, the original aspect ratio will be maintained.
- If O, original size will be mantained. 
- IF S, stretch to fit.
- All the options aside S, which does need to, will add transparent padding to return a 
  size render desires.
- The default is "S", so calling with the "S" argument is the same as not having a third argument
*** layout
Creates a Layout object.
A layout contains 0-n tuples of layouts position-scaleds, and shapes.
Takes 0-n tuples of layouts position-scaleds and shapes as arguments.
#+BEGIN_SRC scheme
(Layout
  (list layout0 position-scaled0 shape0)
  (list layout1 position-scaled1 shape1)
  ...
  (list layoutn-1 position-scaledn-1 shapen-1))

(Layout 
  (list layoutFoo position-scaledFoo rectanglebar)
  (list (layout foobarImage) wholeCard rectanglefoo)
  (list (layout "foo") (circle 3.14))
)

#+END_SRC
*** family
Creates a map of strings to decals, a family.
Takes in a name, and N pairs.
- Requires a family name.
  - The family name is added to the card name when a card is rendered, to avoid name collisions when rendering the same card with multiple families.
  - If a multiple families given, append the names of all the families.

#+BEGIN_SRC family
(family name pair0 ... pairn-1)
(family "fooFamily" (cons "foo" fooImage) (cons "bar" barImage))

#+END_SRC
*** eval-file
Takes in n filepaths, evals each file in given order
#+BEGIN_SRC scheme
(eval-file "filename.filename")
(eval-file "foo.script")
(eval-file "foo.script" "bar.script")
#+END_SRC
Evals foo.script.
Returns null.





*** Decals

- Image Decal
#+BEGIN_SRC 
(image "filepath.[jpg|png|etc]")
(image "foo.jpg")
#+END_SRC
- Color Decal
  - A decal takes in a color
    #+BEGIN_SRC 
(color-decal "color")
(color-decal "white")
    
    #+END_SRC
- String decal
A string from a given font.
#+BEGIN_SRC 
(string "StringText" "Font" "Color" Size)
(string "Hello World!" "Arial.font" "Red" 12)
(string "1" "Arial.font" "Red" 12)
#+END_SRC
- Mask Decal
  - Takes a decal, foo, and has the non transparent portions of foo replaced with corresponding portions of bar. What portion of bar maps to what portion of foo is determined by the position scaled.
    #+BEGIN_SRC scheme
(define foo-decal (image "foo.png"))
(define bar-decal (image "bar.png"))
(mask-decal foo-decal bar-decal (position-scaled 0 0 100 100))
    #+END_SRC
  - Example of effect, mask would leave transparent back ground.
  file:Examples/godzilla-text-poster.jpg
- Inverted Mask Decal
  - Takes a decal, foo, and a decal bar, and has the non transparent parts of bar removed from foo, leaving a bar shaped hole in foo.
  - The position is used to determine where bar should be cut from foo.
    #+BEGIN_SRC scheme
(define foo-decal (image "foo.png"))
(define bar-decal (image "bar.png"))
(inverted-mask-decal foo-decal bar-decal (position-scaled 0 0 100 100))
    #+END_SRC
  - Example: A circle hollowed out
    file:Examples/black-circle.png
- Rotate Decal 
  - Takes in a decal, and a number, and returns a rotated version of that decal
    #+BEGIN_SRC scheme
(define foo-decal (image "foobar.png"))
(rotate-decal foo-decal 90)
;;Returns a decal rotates 90 degrees.
    #+END_SRC
- Corner Rounding Decal
  - Takes a decal, and rounds the corners. 
    #+BEGIN_SRC scheme
(define foo-decal (image "foobar.png"))
(corner-rounder foo-decal)
;;Returns a decal with its corners rounded.
    
    #+END_SRC
- Crop Decal 
  - Takes in a decal, and a position-scaled, crops the decal to the area the position-scaled defines.
#+BEGIN_SRC scheme
(define foo-decal (image "foobar.png"))
(crop-decal foo-decal (position-scaled 50 50 50 50))
;;Returns a decal cropped to the middle.

#+END_SRC
*** Shapes
- Rectangle
#+BEGIN_SRC 
(rectangle width height)
(rectangle 100 200) 
#+END_SRC
- Triangle
#+BEGIN_SRC 
(triangle lengthA lengthB lengthC)
(triangle  100 200 300)
#+END_SRC
- AnyShape
  - Connect point0 -> point1, and then pointn-1 -> point0 to make a shape
#+BEGIN_SRC 
(any-shape point0x point0y point1x point1y ... pointn-1x pointn-1y)
(any-shape  100 100 200 200 300 300)

#+END_SRC
- Circle
#+BEGIN_SRC 
(circle radius)
(Circle 100)
#+END_SRC
*** Position-Scaleds
A position-scaled that can be used in the script
#+BEGIN_SRC 
(position-scaled x-offset% y-offset% scale-width% scale-height%)
(position-scaled 0 0 100 100) 
#+END_SRC

*** Size
A size is used by a card to determine how many pixels it will be.
#+BEGIN_SRC 
(size width height)
#+END_SRC




* Config file
- Allows one to set various options
- Current options are 
  - script-file
    - Specify the script to run
    - No default, can be overridden by terminal args
  - output-format
    - Specify what format to output in
    - Defaults to png
  - output-file
    - Specify where to output the result to
    - Defaults to ./
  - logfile
    - Specify where to log to
    - Defaults to .cardlog
  - load-builder
    - Takes in a name, and the path to a builder java file.
    - Loads said builder into script evaluator
      #+BEGIN_SRC scheme
(set-option "load-builder" "name" "path")
      #+END_SRC
      
- Each option is enter in this format
#+BEGIN_SRC 
(set-option "option-name" values)
#+END_SRC
-So for example
#+BEGIN_SRC 
(set-option "output-dir" "./")
#+END_SRC
** Standard Library
The program will ship with numerous built in functions.
These functions will have std- prepended to their name, and will provide various functionalities that preimplemented in the language, to save the user the hassle of implementing them. All these functions could be done normally, in the scripting language. 

This will be implemented in a std-functions.script, which will the driver will run through the evaluator when the program first runs. 

*** add-border
**** Parameters 
- input-layout : The layout to add a border to
- color : The color to make the border
- size : how thick to make the border
**** Return value
- A layout with the border added
  
**** Example implementation
#+BEGIN_SRC scheme

    (define (std--add-border input-layout color size) 
      (layout
       (list input-layout 
             (position-scaled size size
                              (- 100 size) (- 100 size)))
       (list
        (leaf-layout (color-decal color)) whole-card)
       )
      )
#+END_SRC
*** get-colored-shape-in-a-layout
**** Parameters
- shape : The shape to put in the layout
- color : the color to make it.
**** Return value 
- A layout with a leaf, which is paired with the shape, holding the color, over the whole layout.
**** Example implementaiton
#+BEGIN_SRC scheme
  (define (std--get-colored-shape-in-a-layout shape color)
    (layout
     (list
      (leaf-layout
       (color-decal color)) whole-layout shape)
     )
    )
#+END_SRC

*** get-hollow-decal
**** parameters
- decal : The decal to be hollowed
- size : A number, determines how much to hollow
**** Return value
- A decal that has been hollowed
**** Example implementation
#+BEGIN_SRC scheme
  (define (std--get-hollow-decal decal size)
    (inverted-mask-decal decal decal
                         (position-scaled size size
                                          (- 100 size) (- 100 size)))
    )

#+END_SRC
*** Some constants
- std--whole-layout : (position-scaled 0 0 100 100)
- std--pi : Value of pi

  
*** Many more things!
