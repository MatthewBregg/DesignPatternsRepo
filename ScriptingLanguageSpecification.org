#+AUTHOR: Design Patterns Team 
* Overview of Scripting Language
For the scripting language, we have choosen a lisp style language.
While far from a complete lisp, it has a syntax similar to scheme, and could easily be extended, without breaking existing scripts.

** Built in functions
*** define
#+BEGIN_SRC scheme
(define name value)
(define fooConstant 3)
#+END_SRC
Assigns to the name the given value.
This version does not support defining functions atm.
(See http://www.scheme.com/tspl2d/binding.html)
- Right now, defines may not be nested, and must be done at top level.
*** cons
Takes two arguments, returns a pair holding the two arguments as one object
#+BEGIN_SRC scheme
(cons a b)
(cons 1 2)
#+END_SRC
(See http://download.plt-scheme.org/doc/4.2.4/html/guide/Pairs__Lists__and_Scheme_Syntax.html)
*** card
Takes a card-size, name, and two layouts, one for the front, one for the back.
#+BEGIN_SRC scheme
(card card-size "name" frontLayout backLayout)
#+END_SRC
When a card is rendered, it will pair the layout with the wholeCard position-scaled (0 0 100 100)

*** render
Takes in a single card, a list of cards, or a pair of cards, and 0-n families.
Renders them.
#+BEGIN_SRC scheme
(render card family)
(render cards family)
(render (cons carda cardb) family)
(render some-cards family0 ... familyn-1)
#+END_SRC

Note: The family is an optional argument, leaving it empty is the same as calling
#+BEGIN_SRC scheme
(render cards (family))

#+END_SRC
Which runs render with an empty family.
*** list
Takes in a n arguments, and returns a list of them. 
#+BEGIN_SRC scheme
(list N0 ... Nn-1)
(list 1 2 3 4 5 6 7)
#+END_SRC
*** position-scaled
Takes in a x-offset%, y-offset%, and a scale-width% and scale-height%, and returns a position-scaled object. 
- The two scale arguments are optional, default to 100.
#+BEGIN_SRC scheme
(position-scaled x-offset% y-offset% scale-width% scale-height%)
(position-scaled 0 0 50 50)
(define wholeCard (position-scaled 0 0 100 100))
#+END_SRC
*** leaf-layout
Returns a layout.
Takes in a decal, or a string.
In the event a string is given, the decal will be looked up in the family.
This layout can then be used with the above layout function.
#+BEGIN_SRC scheme
(leaf-layout image)
(leaf-layout foobarImage)
(leaf-layout "foo")
#+END_SRC
**** leaf-layout-mantain-aspect-ratio
Same as a leaf-layout, but instead of stretching an image, will keep it's aspect ratio.
Takes an extra parameter, either a W, or an H.
- If W, maximize the width, without height being larger than given size.
- IF H, maximize the height, without width being larger than given size.
#+BEGIN_SRC scheme
(leaf-layout-mantain-aspect-ratio image '[W|H])

(leaf-layout-mantain-aspect-ratio foobarImage 'W)
(leaf-layout-mantain-aspect-ratio foobarImage 'H)

#+END_SRC
- Sometimes we will probably want an image to not be stretched, for quality reasons.
- This accomplishes that.
- Can be used anywhere a leaf-layout can.
- Will still return an image of size asked, so will need to pad. 
*** layout
Creates a Layout object.
A layout contains 0-n pairs of layouts and position-scaleds.
Takes 0-n pairs of layouts and position-scaleds as arguments.
#+BEGIN_SRC scheme
(Layout
  (cons layout0 position-scaled0)
  (cons layout1 position-scaled1)
  ...
  (cons layoutn-1 position-scaledn-1))

(Layout 
  (cons layoutFoo position-scaledFoo)
  (cons (leaf-layout foobarImage) wholeCard)
  (cons (leaf-layout "foo") wholeCard)
)

#+END_SRC
*** family
Creates a map of strings to decals, a family.
Takes in N pairs.
barImage and fooImage must be defined in config gile.
#+BEGIN_SRC family
(family pair0 ... pairn-1)
(family (cons "foo" fooImage) (cons "bar" barImage))

#+END_SRC
*** eval-file
#+BEGIN_SRC scheme
(eval-file "filename.filename")
(eval-file "foo.script")
#+END_SRC
Evals foo.script.



*** Decals
- Image Decal
#+BEGIN_SRC 
(image "filepath.[jpg|png|etc]")
(image "foo.jpg")
#+END_SRC
- Rectangle Decal
#+BEGIN_SRC 
(rectangle "color")
(rectangle "white") 
#+END_SRC
- Circle Decal
#+BEGIN_SRC 
(circle "color")
(Circle "white")
#+END_SRC
- Custom Shape Decal
  Gets given a list of points, connects point_1 -> point_2 -> ... point_n-1 -> point 1
#+BEGIN_SRC 
(custom-shape (cons 0 1) (cons 1 0)...)
#+END_SRC
- String decal
A string from a given font.
#+BEGIN_SRC 
(string "StringText" "Font" "Color" Size)
(string "Hello World!" "Arial.font" "Red" 12)
(string "1" "Arial.font" "Red" 12)
#+END_SRC
*** Position-Scaleds
A position-scaled that can be used in the script
#+BEGIN_SRC 
(position-scaled x-offset% y-offset% scale-width% scale-height%)
(position-scaled 0 0 100 100) 
#+END_SRC

*** Size
A size is used by a card to determine how many pixels it will be.
#+BEGIN_SRC 
(size width height)
#+END_SRC



