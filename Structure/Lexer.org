- Needs to take a file in, return a list of tokens.

#+BEGIN_SRC plantuml :file LexerUML.png
skinparam dpi 300


class MutableExpressionToken 
MutableExpressionToken : funcName:String
MutableExpressionToken : args:List<Token>
MutableExpressionToken : allParamsVars:bool 
note bottom : Mutable version of expression token \n for constructing Expresson token, \n but cannot be used as Expression token, \n as it is mutable.

interface Lexer<<interface>>
Lexer : +tokenizeFile(file:Path) : List<Token>
Lexer : -clear():void
Lexer : -tokenizeSexp(file:String,t:ExpressionToken) : Token
Lexer : -makeDoubleToken(n:double) : Token
Lexer : -makeParseErrorToken(position:int,error:String) : Token
Lexer : -makeStringToken(str:String) : Token
Lexer : -makeVariableToken(varName:String) : Token
Lexer : -makeExpressionToken(MutableExpressionToken falseToken) : Token

class LispLexer
LispLexer : -fileContents:String
LispLexer : -position:int
Lexer <|.. LispLexer
LispLexer : -tokens:List<Token>

note top of LispLexer
 The lexer load the file into a String.
 It will then call tokenizeSexp on the String, pass in null for t.
 Then inside tokenizeSexp
 If there is a "(", then make an MutableExpressionToken.
  Set t, if not null, allParamsVars to false.
  There should be a new symbol immediately after the opener
   If there isn't return a call makeErrorToken, and return.
  This symbol must not contain double quotes, and must start with an alpha character.
   Else, call makeErrorToken, and return. 
  Set the expression funcName to be this symbol. 
  Advance position past this symbol.
  If the current position is a ")", then return makeExpressionToken from MutableExpressionToken, return it, and move position past it.
  Else Call tokenizeSexp again, and add the returned token to the MutableExpressionToken argument list.
If double quotes are hit, call makeStringToken with the contents of those double quotes, and return the token.
  Set t, if not null, allParamsVars to false.
If a number is hit, aka, anything with no spaces, and only 0-9 and maybe a decimal, then call 
     makeDoubleToken with that value, 
     Set t, if not null, allParamsVars to false,
     and return the token
If a symbol is hit, aka, something with an alpha character in it, then call makeVariableToken with that
     symbol, and return the token.
In all three above cases, upon return, update the position.

Then add the position returned from tokenizeSexp to the list of tokens, and call it again if position is still inside the string.

end note
  

#+END_SRC

#+RESULTS:
[[file:LexerUML.png]]

