#+BEGIN_SRC java
  /**
     class Image {
      
     }

     class VectorImage extends Image {
     }
     class BitMapImage extends Image {
     }

     abstract class DecalRenderingStrategy {
     abstract Image renderImage(filePath);
     abstract Image renderText(String,font,size);
     abstract Image shapeImage(shapeStuff);
     }

     class PNGDecalRenderingStrategy extends DecalRenderingStrategy {

     }

     class VectorDecalRenderingStrategy extends DecalRenderingStrategy {

     }

  ,**/

  class RenderedCard {
      private Image front;
      private Image back;
      private String name;
  }

  class ErrorMessage {
      String message;
      File occuredIn;
      int line;
      int col;
      int code;
  }

  class Logger {
      void addError(ErrorMessage s);
      void addWarning(ErrorMessage s);

      ArrayList<ErrorMessage> getWarnings();
      ArrayList<ErrorMessage> getErrors();

      private Logger() {};

      public Logger getInstance();

  }

  void exitIfErrors(Options options) {
      Logger logger = Logger.getInstance();
      if ( hasErrors() ) {
          //Print erors
      }
      //Print to file with the options
      System.exit(errorCode);
  }



  void main() {
      Options options = new OptionsParser(defaultOptionsFilePath);
      exitIfErrors(options);

      ScriptEvaluator evaluator = new LispScriptEvaluator();

      Lexer lexer = evaluator.getLexer();
      //Add all the builders
      //Get any builder java files loaded from options, load them in
      //Read the std-functions.script file, eval it.
      evaluator.evalTokens(lexer.tokenizeFile(options.scriptFile()));
      exitIfErrors(options);



      ArrayList<RenderedCard> cards = evaluator.getCardsThatWereRendered();

      Output output = new Output(options);
      for ( RenderedCard c : cards ) {
          output.writeCardToDisk(c);
      }

      //Print warnings from Logger

  }


#+END_SRC

#+BEGIN_SRC plantuml :file DriverUML.png
skinparam dpi 300

class Logger
Logger : {static} loggerInstance : Logger
Logger : {static} getLoggerInstance():Logger
Logger : adddError(ErrorMessage s)
Logger : addWarning(ErrorMessage s)
Logger : getWarnings():ArrayList<ErrorMessage>
Logger : getErrors():ArrayList<ErrorMessage>
note bottom : Logger is a singleton 



class ErrorMessage
ErrorMessage : message : String
ErrorMessage : occuredIn : Path
ErrorMessage : line:Int
ErrorMessage : col:Int
ErrorMessage : code:Int

Logger o--> ErrorMessage 

class Option
Option : ScriptFile() : Path
Option : OutFormat() : Enum
Option : OutputFile() : Path
Option : LogFile() : Path

class Output
Output : outputPath : Path
Output : format : OutputFormat
Output : writeCardToDisk(c:Card)
Output : Output(o:Option)
note bottom : Converts the lossless PNG Images to the output format, and then writes an image with the card name. Card name will have to be different when rerendered with a different family, so family name will be appended to card name.


enum OutputFormat {
  JPG
  JPG2000
  JPGX
  PNG
  PDF
  GIF
  BMP
}

class Driver
Driver : public static void main(String[] args)

note top : The driver, after creating the ScriptEvaluator, will add the predefined builders to it, via eval.addToTopEnv("Buildername",new XBuilder()), \n it will do this for all Builders defined in the Builders section.

Output --> OutputFormat

interface ScriptEvaluator << interface >>
hide ScriptEvaluator methods
hide ScriptEvaluator members

class RenderedCard
hide RenderedCard methods
hide RenderedCard members

Driver --> Output
Driver --> ScriptEvaluator
Driver --> Option
Driver --> Logger
Driver --> RenderedCard
  



#+END_SRC

#+RESULTS:
[[file:DriverUML.png]]

