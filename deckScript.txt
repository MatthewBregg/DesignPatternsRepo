//------------------------------------------------------
//family for all red and black cards and an empty family
//------------------------------------------------------
(define emptyFamily (family))
(define redFamily (family (cons "ace" redA)
                          (cons "two" redTwo)
                          (cons "three" redThree)
                          (cons "four" redFour)
                          (cons "five" redFive)
                          (cons "six" redSix)
                          (cons "seven" redSeven)
                          (cons "eight" redEight)
                          (cons "nine" redNine)
                          (cons "ten" redTen)
                          (cons "jack" redJack)
                          (cons "queen" redQueen)
                          (cons "king" redKing)))
(define blackFamily (family (cons "ace" blackA)
                            (cons "two" blackTwo)
                            (cons "three" blackThree)
                            (cons "four" blackFour)
                            (cons "five" blackFive)
                            (cons "six" blackSix)
                            (cons "seven" blackSeven)
                            (cons "eight" blackEight)
                            (cons "nine" blackNine)
                            (cons "ten" blackTen)
                            (cons "jack" blackJack)
                            (cons "queen" blackQueen)
                            (cons "king" blackKing)))

//------------------------------------------------------
//family for all 4 suits
//------------------------------------------------------
(define HeartFamily (family (cons "suit" heartImage)
                            (cons "jackImage" jackHeartImage)
                            (cons "queenImage" queenHeartImage)
                            (cons "kingImage" kingHeartImage)))
(define DiamondFamily (family (cons "suit" diamondImage )
                              (cons "jackImage" jackDiamondImage)
                              (cons "queenImage" queenDiamondImage)
                              (cons "kingImage" kingDiamondImage)))
(define SpadeFamily (family (cons "suit" spadeImage)
                            (cons "jackImage" jackSpadeImage)
                            (cons "queenImage" queenSpadeImage)
                            (cons "kingImage" kingSpadeImage)))
(define ClubFamily (family (cons "suit" clubImage)
                           (cons "jackImage" jackClubImage)
                           (cons "queenImage" queenClubImage)
                           (cons "kingImage" kingClubImage)))

//------------------------------------------------------
//layouts for all the cards
//------------------------------------------------------
(define cardBackLayout
  (layout
  (cons (leaf-layout whiteRectangle) whole Card)
  (cons (leaf-layout cardBack) 0,0,95,95)))
(define backgroundLayout 
  (layout 
  (cons (leaf-layout whiteRectangle) wholeCard)
  (cons (leaf-layout "suit") topLeftCorner)
  (cons (leaf-layout "suit") topRightCorner)))

(define aceLayout
  (layout 
  (cons backGroundLayout wholeCard)
  (cons (leaf-layout "ace") topLeftCorner)
  (cons (leaf-layout "ace") bottomRightCorner)
  (cons (leaf-layout "suit") center))
(define aceCard (card cardSize "Ace" aceLayout cardBackLayout))

(define twoLayout
  (layout 
  (cons backGroundLayout wholeCard)
  (cons (leaf-layout "two") topRightCorner)
  (cons (leaf-layout "two") topLeftCorner)
  (cons (leaf-layout "suit") center-2-1)
  (cons (leaf-layout "suit") center-2-2))
(define twoCard (card cardSize "Two" twoLayout cardBackLayout))

(define threeLayout
  (layout 
  (cons backGroundLayout wholeCard)
  (cons (leaf-layout "three") topRightCorner)
  (cons (leaf-layout "three") topLeftCorner)
  (cons (leaf-layout "suit") center-3-1)
  (cons (leaf-layout "suit") center-3-2)
  (cons (leaf-layout "suit") center-3-3)))
(define threeCard (card cardSize "Three" threeLayout backLayout))

(define fourLayout
  (layout 
  (cons backGroundLayout wholeCard)
  (cons (leaf-layout "four") topRightCorner)
  (cons (leaf-layout "four") topLeftCorner)
  (cons (leaf-layout "suit") center-4-1)
  (cons (leaf-layout "suit") center-4-2)
  (cons (leaf-layout "suit") center-4-3)
  (cons (leaf-layout "suit") center-4-4)))
(define fourCard (card cardSize "Four" fourLayout backLayout))

(define fiveLayout
  (layout 
  (cons backGroundLayout wholeCard)
  (cons (leaf-layout "five") topRightCorner)
  (cons (leaf-layout "five") topLeftCorner)
  (cons (leaf-layout "suit") center-5-1)
  (cons (leaf-layout "suit") center-5-2)
  (cons (leaf-layout "suit") center-5-3)
  (cons (leaf-layout "suit") center-5-4)
  (cons (leaf-layout "suit") center-5-5)))
(define fiveCard (card cardSize "Five" fiveLayout backLayout))

(define sixLayout
  (layout 
  (cons backGroundLayout wholeCard)
  (cons (leaf-layout "six") topRightCorner)
  (cons (leaf-layout "six") topLeftCorner)
  (cons (leaf-layout "suit") center-6-1)
  (cons (leaf-layout "suit") center-6-2)
  (cons (leaf-layout "suit") center-6-3)
  (cons (leaf-layout "suit") center-6-4)
  (cons (leaf-layout "suit") center-6-5)
  (cons (leaf-layout "suit") center-6-6)))
(define sixCard (card cardSize "Six" sixLayout backLayout))

(define sevenLayout
  (layout 
  (cons backGroundLayout wholeCard)
  (cons (leaf-layout "seven") topRightCorner)
  (cons (leaf-layout "seven") topLeftCorner)
  (cons (leaf-layout "suit") center-7-1)
  (cons (leaf-layout "suit") center-7-2)
  (cons (leaf-layout "suit") center-7-3)
  (cons (leaf-layout "suit") center-7-4)
  (cons (leaf-layout "suit") center-7-5)
  (cons (leaf-layout "suit") center-7-6)
  (cons (leaf-layout "suit") center-7-7)))
(define sevenCard (card cardSize "Seven" sevenLayout backLayout))

(define eightLayout
  (layout 
  (cons backGroundLayout wholeCard)
  (cons (leaf-layout "eight") topRightCorner)
  (cons (leaf-layout "eight") topLeftCorner)
  (cons (leaf-layout "suit") center-8-1)
  (cons (leaf-layout "suit") center-8-2)
  (cons (leaf-layout "suit") center-8-3)
  (cons (leaf-layout "suit") center-8-4)
  (cons (leaf-layout "suit") center-8-5)
  (cons (leaf-layout "suit") center-8-6)
  (cons (leaf-layout "suit") center-8-7)
  (cons (leaf-layout "suit") center-8-8)))
(define eightCard (card cardSize "Eight" eightLayout backLayout))

(define nineLayout
  (layout 
  (cons backGroundLayout wholeCard)
  (cons (leaf-layout "nine") topRightCorner)
  (cons (leaf-layout "nine") topLeftCorner)
  (cons (leaf-layout "suit") center-9-1)
  (cons (leaf-layout "suit") center-9-2)
  (cons (leaf-layout "suit") center-9-3)
  (cons (leaf-layout "suit") center-9-4)
  (cons (leaf-layout "suit") center-9-5)
  (cons (leaf-layout "suit") center-9-6)
  (cons (leaf-layout "suit") center-9-7)
  (cons (leaf-layout "suit") center-9-8)
  (cons (leaf-layout "suit") center-9-9)))
(define nineCard (card cardSize "Nine" nineLayout backLayout))

(define tenLayout
  (layout 
  (cons backGroundLayout wholeCard)
  (cons (leaf-layout "ten") topRightCorner)
  (cons (leaf-layout "ten") topLeftCorner)
  (cons (leaf-layout "suit") center-10-1)
  (cons (leaf-layout "suit") center-10-2)
  (cons (leaf-layout "suit") center-10-3)
  (cons (leaf-layout "suit") center-10-4)
  (cons (leaf-layout "suit") center-10-5)
  (cons (leaf-layout "suit") center-10-6)
  (cons (leaf-layout "suit") center-10-7)
  (cons (leaf-layout "suit") center-10-8)
  (cons (leaf-layout "suit") center-10-9)
  (cons (leaf-layout "suit") center-10-10)))
(define tenCard (card cardSize "Ten" tenLayout backLayout))

(define jackLayout 
  (layout 
  (cons backGroundLayout wholeCard)
  (cons (leaf-layout "jack") topRightCorner)
  (cons (leaf-layout "jack") bottomLeftCorner)
  (cons (leaf-layout "jackImage") centerFace)))
(define jackCard (card cardSize "Jack" jackLayout backLayout))

(define queenLayout 
  (layout 
  (cons backGroundLayout wholeCard)
  (cons (leaf-layout "queen") topRightCorner)
  (cons (leaf-layout "queen") bottomLeftCorner)
  (cons (leaf-layout "queenImage") centerFace)))
(define queenCard (card cardSize "Queen" queenLayout backLayout))

(define kingLayout 
  (layout 
  (cons backGroundLayout wholeCard)
  (cons (leaf-layout "king") topRightCorner)
  (cons (leaf-layout "king") bottomLeftCorner)
  (cons (leaf-layout "kingImage") centerFace)))
(define kingCard (card cardSize "King" kingLayout backLayout))


//------------------------------------------------------
//makes the subDeck of 13 cards, for each suit
//------------------------------------------------------
(define suitSubDeck (list aceCard twoCard threeCard fourCard fiveCard sixCard sevenCard 
                          eightCard nineCard tenCard jackCard queenCard kingCard ))

//------------------------------------------------------
//renders the subdeck 4 times for each suit
//------------------------------------------------------
(render suitSubDeck heartFamily redFamily)
(render suitSubDeck diamondSuite redFamily)
(render suitSubDeck clubFamily blackFamily)
(render suitSubDeck spadeSuite blackFamily)