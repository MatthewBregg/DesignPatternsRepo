#+BEGIN_SRC plantuml :file TokensUML.png

abstract class Token as "{abstract}\nToken"


Token : {abstract}getArguments():List<Token>
note top : For example,\n if (render someCard familyA (family \"foo\" (cons \"foo\" bar)), \n then someCard will be one token, familyA another, (family \"foo\" (cons \"foo\" bar)) will be a third. "
Token : {abstract}getBuilder(ScriptEvaluator ScriptEvaluator):Builder
class VariableToken


note bottom of VariableToken
 When asked for a builder,
 will look in the ScriptEvaluators environment for a
 variable of it's name. If found, return a VariableBuilder,
 paramatized with said ScriptObject. 
 If not found, return an UndefinedVariableBuilder,
 paramatized with the name.

 FamilyA would be one of these tokens,
 a variable that is referenced.
 A variable name can't start with a number,
 to make it determinable from an int.
end note
VariableToken : varName : String
class ExpressionToken
ExpressionToken : funcName : String

note bottom of ExpressionToken
  (family "foo" (cons "foo" bar)) would be one of these
  When asked for a builder,
   will look in environment for builder matching current
  function name. If none found, will create an 
  UndefinedFunctionBuilder, with the name, and paramater
  names paramaterized

 allParamsVars is defaults to true, 
 and should any class that is not a variable be 
 added to its arguments by the parser, 
 it will be set to false.
end note

ExpressionToken : List<Token>
ExpressionToken : allParamsVars : boolean = true
abstract class AtomToken as "{abstract}\nAtomToken"
note bottom : Any ints or strings will be one of these. 
class StringAtomToken 

note bottom of StringAtomToken
 When asked for a builder,
 returns a ConstantBuilderVisiter,
 paramatized with an StringScriptWrapper
 of the appropriate value
end note

StringAtomToken : value : String

class DoubleAtomToken
DoubleAtomToken : value : double

note bottom of DoubleAtomToken
 When asked for a builder,
 returns a ConstantBuilderVisiter,
 paramatized with an DoubleScriptWrapper
 of the appropriate value
end note


class ParseErrorToken
note top : If a parse error is hit, then make this, and stop parsing.
ParseErrorToken : error : String


ParseErrorToken : getBuilder(ScriptEvaluator ScriptEvaluator): ErrorBuilderVisiter
AtomToken : {abstract}getBuilder(ScriptEvaluator ScriptEvaluator): ConstantBuilderVisiter
VariableToken : getBuilder(ScriptEvaluator ScriptEvaluator): VariableBuilderVisiter



note "These tokens will add the info the builder they are returning needs, before returning" as N1

N1 -- AtomToken
N1 -- VariableToken
N1 -- ParseErrorToken

Token <|-- VariableToken
note  "Get arguments is always empty" as emptyArg
emptyArg -- AtomToken
emptyArg -- VariableToken
emptyArg -- ParseErrorToken

Token <|-- ExpressionToken
Token <|-- AtomToken
AtomToken <|-- DoubleAtomToken
AtomToken <|-- StringAtomToken
Token <|-- ParseErrorToken




#+END_SRC

#+RESULTS:
[[file:TokensUML.png]]

