#+BEGIN_SRC plantuml :file RenderBuilder.png
skinparam dpi 300

abstract class ScriptObjectBuilder as "{abstract}\nScriptObjectBuilder"
hide ScriptObjectBuilder methods
hide ScriptObjectBuilder members

class RenderBuilder

RenderBuilder : families : ArrayList<Family> 
RenderBuilder : cards : ArrayList<Card>
RenderBuilder : addCard(c:Card)
RenderBuilder : addFamily(Family f)
RenderBuilder : doRender()
RenderBuilder : state : State = new Empty
RenderBuilder : setState(s:State)
RenderBuilder : addCard(c:Card)
RenderBuilder : addList(l:List)
RenderBuilder : addConsPair(l:ConsPair)
RenderBuilder : addScriptObject(s:ScriptObject)
RenderBuilder : getResult():ScriptObject
RenderBuilder : clone() : RenderBuilder
note top : clone will make a new list, with the elements of the existing one. Card will be shared, but since clone is used to get instances from factory, will always be null anyway when clone is called.
note bottom : doRender calls on card render, with the families as an argument. It will then take the result, and add it to the eval, super.getEval().addRenderedCard(rc), does this for each card

note bottom : Delegates getResult,addCard,addFamily to state. \n For addList, get the list, and for each ScriptObject, call accept(this). \n For ConsPair, do acceptBuilderOnPair(this).

ScriptObjectBuilder <|-- RenderBuilder

RenderBuilder +-- State

abstract class State as "{abstract}\nState"
State : {abstract}getResult(rb:RenderBuilder) : ScriptObject
State : {abstract}addFamily(f:Family,rb:RenderBuilder)
State : {abstract}addCard(c:Card,rb:RenderBuilder)

State <|-- Empty
State <|-- HaveCard
State <|-- ErrorState
State <|-- HasFamily

class Empty
Empty : getResult(rb:RenderBuilder) : ScriptObject
Empty : addFamily(f:Family,rb:RenderBuilder)
Empty : addCard(c:Card,rb:RenderBuilder)

note top of Empty
  getResult : Return ErrorScriptObject, set rb state to error state
  addFamily : Must have card first, set rb state to error state
  addCard : Call rb.setCard(c), set rb state to HaveCard state.
end note

class HaveCard
HaveCard : getResult(rb:RenderBuilder) : ScriptObject
HaveCard : addFamily(f:Family,rb:RenderBuilder)
HaveCard : addCard(c:Card,rb:RenderBuilder)

note top of HaveCard
  getResult : Call rb.doRender(), return NullScriptObject
  addFamily : call rb.addFamily(f), set rb state to HasFamily state.
  addCard : call rb.addCard(c)
end note

class HasFamily
HasFamily : getResult(rb:RenderBuilder) : ScriptObject
HasFamily : addFamily(f:Family,rb:RenderBuilder)
HasFamily : addCard(c:Card,rb:RenderBuilder)

note top of HasFamily
  getResult : Call rb.doRender(), return NullScriptObject
  addFamily : call rb.addFamily(f)
  addCard : set rb state to error state.
end note

class ErrorState
ErrorState : getResult(rb:RenderBuilder) : ScriptObject
ErrorState : addFamily(f:Family,rb:RenderBuilder) 
ErrorState : addCard(c:Card,rb:RenderBuilder)

note top of ErrorState 
  getResult : Return ErrorScriptObject
  addFamily : Do nothing, already an error
  addCard : Do nothing, already an error
end note

#+END_SRC

#+RESULTS:
[[file:RenderBuilder.png]]

