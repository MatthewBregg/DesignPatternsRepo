#+BEGIN_SRC plantuml :file LayeringDecalDecoratorBuilder.png
class LayeringDecalDecoratorBuilder
LayeringDecalDecoratorBuilder : state : State = new EmptyState
LayeringDecalDecoratorBuilder : addDecal(d:Decal)
LayeringDecalDecoratorBuilder : addPositionScaled(s:PositionScaled)
LayeringDecalDecoratorBuilder : getResult() 
LayeringDecalDecoratorBuilder : -LayeringDecalDecorator
LayeringDecalDecoratorBuilder : getLayerDecoratorDecal(a:Decal,b:Decal,pos:PositionScaled) : Decal
note top : Delegates messages to state.
note top : Parameterize with the \n concrete LayeringDecalDecorator to return, \n do so for each subclass of \n LayeringDecalDecorator, so MaskDecalDecorator, and InvertedMaskDecalDecorator.


abstract class ScriptObjectBuilder as "{abstract}\nScriptObjectBuilder"
hide ScriptObjectBuilder methods
hide ScriptObjectBuilder members

ScriptObjectBuilder <|-- LayeringDecalDecoratorBuilder

LayeringDecalDecoratorBuilder +-- LayeringDecalState

LayeringDecalState <|-- ErrorState
LayeringDecalState <|-- EmptyState
LayeringDecalState <|-- FullState

abstract class LayeringDecalState as "{abstract}\nLayeringDecalState"
LayeringDecalState : -b:LayeringDecalDecoratorBuilder
LayeringDecalState : +getBuilder()
LayeringDecalState : +{abstract}addDecal(d:Decal)
LayeringDecalState : +{abstract}addPositionScaled(d:PositionScaled)
LayeringDecalState : +{abstract}getResult()

class ErrorState
ErrorState : +addPositionScaled(d:PositionScaled)
ErrorState : +getResult()
note top : All methods do nothing, already in error state, get result returns an error script object

class EmptyState
EmptyState : +addPositionScaled(d:PositionScaled)
EmptyState : +addDecal(d:Decal)
EmptyState : +getResult()
note top of EmptyState 
 getResult : set b to new error state, return error script object.
 addDecal : set b to new HasDecalState, giving d as the decal.
 addPositionScaled : set B to new error state.
end note


class HasOneDecalState
HasOneDecalState : -decal : Decal
HasOneDecalState : +addDecal(d:Decal)
HasOneDecalState : +addPositionScaled(d:PositionScaled)
HasOneDecalState : +getResult()
note top of HasOneDecalState 
 getResult : set b to new error state, return error script object.
 addPositionScaled : set b to new error state
 addDecal : set b to new HasTwoDecalState, giving decal, and d as the two decals.
end note

LayeringDecalState <|-- HasOneDecalState

class HasTwoDecalState
HasTwoDecalState : -decal2 : Decal
HasTwoDecalState : -decal1 : Decal
HasTwoDecalState : +addDecal(d:Decal)
HasTwoDecalState : +addPositionScaled(d:PositionScaled)
HasTwoDecalState : +getResult()
note top of HasTwoDecalState 
 getResult : set b to new error state, return error script object.
 addPositionScaled : set b to new FullState, giving decal1, decal2, and d as parameters for decal1, decal2, and positionScaled
 addDecal : set b to new error state.
end note

LayeringDecalState <|-- HasTwoDecalState


class FullState
FullState : decal2 : Decal
FullState : decal1 : Decal
FullState : PositionScaled : PositionScaled
FullState : +addString(s:String)
FullState : +addPositionScaled(d:PositionScaled)
FullState : +getResult()
note top of FullState 
 getResult : Return new LayeringDecalDecorator, call on b, getLayerDecoratorDecal, using the decals, and PositionScaled stored, return result. 
 addPositionScaled : set b to new error state
 addString : set b to new error state
end note








#+END_SRC

#+RESULTS:
[[file:LayeringDecalDecoratorBuilder.png]]

