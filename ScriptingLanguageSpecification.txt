		    ________________________________

		     SCRIPTINGLANGUAGESPECIFICATION

			  Design Patterns Team
		    ________________________________


Table of Contents
_________________

1 Overview of Scripting Language
.. 1.1 Built in functions
..... 1.1.1 define
..... 1.1.2 cons
..... 1.1.3 card
..... 1.1.4 render
..... 1.1.5 list
..... 1.1.6 position-scaled
..... 1.1.7 leaf-layout
..... 1.1.8 layout
..... 1.1.9 family
..... 1.1.10 eval-file
..... 1.1.11 Decals
..... 1.1.12 Position-Scaleds
..... 1.1.13 Size


1 Overview of Scripting Language
================================

  For the scripting language, we have choosen a lisp style language.
  While far from a complete lisp, it has a syntax similar to scheme, and
  could easily be extended, without breaking existing scripts.


1.1 Built in functions
~~~~~~~~~~~~~~~~~~~~~~

1.1.1 define
------------

  ,----
  | (define name value)
  | (define fooConstant 3)
  `----
  Assigns to the name the given value.  This version does not support
  defining functions atm.  (See
  [http://www.scheme.com/tspl2d/binding.html])
  - Right now, defines may not be nested, and must be done at top level.


1.1.2 cons
----------

  Takes two arguments, returns a pair holding the two arguments as one
  object
  ,----
  | (cons a b)
  | (cons 1 2)
  `----
  (See
  [http://download.plt-scheme.org/doc/4.2.4/html/guide/Pairs__Lists__and_Scheme_Syntax.html])


1.1.3 card
----------

  Takes a card-size, name, and two layouts, one for the front, one for
  the back.
  ,----
  | (card card-size "name" frontLayout backLayout)
  `----
  When a card is rendered, it will pair the layout with the wholeCard
  position-scaled (0 0 100 100)


1.1.4 render
------------

  Takes in a single card, a list of cards, or a pair of cards, and 0-n
  families.  Renders them.
  ,----
  | (render card family)
  | (render cards family)
  | (render (cons carda cardb) family)
  | (render some-cards family0 ... familyn-1)
  `----

  Note: The family is an optional argument, leaving it empty is the same
  as calling
  ,----
  | (render cards (family))
  `----
  Which runs render with an empty family.


1.1.5 list
----------

  Takes in a n arguments, and returns a list of them.
  ,----
  | (list N0 ... Nn-1)
  | (list 1 2 3 4 5 6 7)
  `----


1.1.6 position-scaled
---------------------

  Takes in a x-offset%, y-offset%, and a scale-width% and scale-height%,
  and returns a position-scaled object.
  - The two scale arguments are optional, default to 100.
  ,----
  | (position-scaled x-offset% y-offset% scale-width% scale-height%)
  | (position-scaled 0 0 50 50)
  | (define wholeCard (position-scaled 0 0 100 100))
  `----


1.1.7 leaf-layout
-----------------

  Returns a layout.  Takes in a decal, or a string.  In the event a
  string is given, the decal will be looked up in the family.  This
  layout can then be used with the above layout function.
  ,----
  | (leaf-layout image)
  | (leaf-layout foobarImage)
  | (leaf-layout "foo")
  `----


* 1.1.7.1 leaf-layout-mantain-aspect-ratio

  Same as a leaf-layout, but instead of stretching an image, will keep
  it's aspect ratio.  Takes an extra parameter, either a W, or an H.
  - If W, maximize the width, without height being larger than given
    size.
  - IF H, maximize the height, without width being larger than given
    size.
  ,----
  | (leaf-layout-mantain-aspect-ratio image '[W|H])
  | 
  | (leaf-layout-mantain-aspect-ratio foobarImage 'W)
  | (leaf-layout-mantain-aspect-ratio foobarImage 'H)
  `----
  - Sometimes we will probably want an image to not be stretched, for
    quality reasons.
  - This accomplishes that.
  - Can be used anywhere a leaf-layout can.
  - Will still return an image of size asked, so will need to pad.


1.1.8 layout
------------

  Creates a Layout object.  A layout contains 0-n pairs of layouts and
  position-scaleds.  Takes 0-n pairs of layouts and position-scaleds as
  arguments.
  ,----
  | (Layout
  |   (cons layout0 position-scaled0)
  |   (cons layout1 position-scaled1)
  |   ...
  |   (cons layoutn-1 position-scaledn-1))
  | 
  | (Layout 
  |   (cons layoutFoo position-scaledFoo)
  |   (cons (leaf-layout foobarImage) wholeCard)
  |   (cons (leaf-layout "foo") wholeCard)
  | )
  `----


1.1.9 family
------------

  Creates a map of strings to decals, a family.  Takes in N pairs.
  barImage and fooImage must be defined in config gile.
  ,----
  | (family pair0 ... pairn-1)
  | (family (cons "foo" fooImage) (cons "bar" barImage))
  `----


1.1.10 eval-file
----------------

  ,----
  | (eval-file "filename.filename")
  | (eval-file "foo.script")
  `----
  Evals foo.script.


1.1.11 Decals
-------------

  - Image Decal
  ,----
  | (image "filepath.[jpg|png|etc]")
  | (image "foo.jpg")
  `----
  - Rectangle Decal
  ,----
  | (rectangle "color")
  | (rectangle "white")
  `----
  - Circle Decal
  ,----
  | (circle "color")
  | (Circle "white")
  `----
  - Custom Shape Decal Gets given a list of points, connects point_1 ->
    point_2 -> ... point_n-1 -> point 1
  ,----
  | (custom-shape (cons 0 1) (cons 1 0)...)
  `----
  - String decal
  A string from a given font.
  ,----
  | (string "StringText" "Font" "Color" Size)
  | (string "Hello World!" "Arial.font" "Red" 12)
  | (string "1" "Arial.font" "Red" 12)
  `----


1.1.12 Position-Scaleds
-----------------------

  A position-scaled that can be used in the script
  ,----
  | (position-scaled x-offset% y-offset% scale-width% scale-height%)
  | (position-scaled 0 0 100 100)
  `----


1.1.13 Size
-----------

  A size is used by a card to determine how many pixels it will be.
  ,----
  | (size width height)
  `----
