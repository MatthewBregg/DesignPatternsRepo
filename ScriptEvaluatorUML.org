
* What is needed....
** Driver
*** Argument parser
**** Possible arguments
- Parses inputs from command line
- Will use defaults if arguments missing.
  - Setting file. (Like .cardgenerator.cfg) -config_file=".cardgenerator.cfg"
    - Could specify all settings in here instead, defaults to looking for .cardgenerator in same directory
  - --help 
    - Print out help if passed in, and then quit program. 
  - -output-format="[png|jpg|pdf|etc]" (I'm leaving out SVG and any vector formats, that complicates design... Ignore them for now, not needed.
    - Set the format to output to. Defaults to pdf. 
  - -script-file="script.cards"
    - The script to run. Only one script file can be run, but this script file can reference other scripts.
  - output-dir="./"
    - Defaults to current directory.
    - Outputs created file here. Must already exist.
  - -logfile=".card_log"
    - Defaults to .card_log
    - Where to log errors/warning/notifications from parsing script/config.
  - -loglevel="[1|2|3|4|5]"
    - How much detail to log
      
**** Interface
- Driver query options object it returns.
- Most of these options should be handled by driver, this just parses it...
*** Image Renderer
- Maybe this will be a strategy?
- Takes the Image files given in, plus option object.
- Compose them into one sheet, cards should have front and backs next to each other, with the sides labelled, and the card name should be visible. 
- Convert to desire format. (EX, to jpg, png,pdf)
- Return the file
*** File reading
- Takes option object, and returns needed files.
*** File writing
- Takes option object, and output file, and writes it to given disk location. 
  
*** Main loop
- If any of these steps returns an error/warning, place the error/warning into the log file
  - and depending on the severity,
  - abort and print error, or continue, and print warning.
- Pass the args to the Argument Parser, hold onto option object.
- Retrieve the input files from File Reading
- Pass the input files into the ScriptEvaluator
- Retrieve a ArrayList of tuplets from ScriptEvaluator, each tuplet has front image, back image, card name.
- Send to Image Renderer
- Send output from Image Renderer to file writer, write to disk. (Maybe use visiter?)
- Done


** Object Creation builder
- Allows one to create objects from the scripting langauge cleanly.
  - Context sees it is making something new, sees what it is making from function.
  - Token comparison will have to happen some how, although could avoid a hard coded comparison...
  - A FooBuilder is made. 
  - For each argument in foo, if it's a simple variable, grab it, if a new object as well, recursively run this to make it, and then....
  - We store things as a broad supertype for all available types.
  - This type then takes in the FooBuilder, and call the addAsArgMyType(this)
    #+BEGIN_SRC java
//Bar was made from the arguments
class BarType {
//...Ellided stuff

void acceptBuilder(Builder builder) {
   buildee.addAsArgMyType(this);
}
    
    #+END_SRC
  - When all arguments are in the builder, do builder.getScriptObject(), returning a script object. 
  - If the builder was given arguments that it couldn't work with, then it will return null.
  
  - Why go through all this hassle?
  - Then we can store all objects the script makes in a map of strings -> scriptobject.
  - And then, when we reference them to create another object, we can do it without casting!
  - It's essentially combing builder + visiter.
  - This is instead of an abstract factory!
    - Because an abstract Factory doesn't actually make that much sense!
    - We aren't switching between families of types!
    - Factory method could work better than that I think?. 
      
#+BEGIN_SRC java
  //Null in this case, rather than using java null, might want to be
  //A special subclass of script object.
  //then we don't need null checks!
  //The null object can just propogate!
  //It would have ot hold it's error inside it.

  //For defines, the defines is given in as usually, a define builder is made,
  //The define builder will have to set the define, so builders will need
  //Access to the map of var names -> ScriptObjects

  //The parser makes the tokens.

  //eval-file is handled by making a new Parser, and assembler, and running that on the script, but passing in the existing global environment/anything else. 

  /**
     (VarName x y)
     (define (VarName x y) (function token))
     In both cases above, VarName is going to be parsed as an expression token.
     The difference will then be during evaluation....
     The token itself will attempt to look up the varname.
     So, for already defined functions, the builder will have been created.
     For undefined functions, returned undefined builder?
     And undefined builder will return an undefined function call block, which a
     define can then use to know, ok, I am making a function, make that function, and put it in the
     function builders!! The function builder won't be a singleton, but will be kept in the env!!
     Then when calling, the builder will retreive the function, whose builder will have stored
     the function body tokens.
     This builder then gets the arguments, input, makes a new env frame, and then calls the
     Script evaluator on the tokens given in.
     Then pop the stack frame!
     One problem, the tokens are already evaluated the former stage...

     Oh, and current design should have undefined varname.
     So, add 2 objs.
     Undefined varname
     Undefined function call
     Null script object

     Builder Factory will be in env...

     The two undefined* ScriptObjects will be made by the tokens.
     Upon seeing the respective map is only returning null, they will take name, put it in, and then in the case of function obj, all parameters
     will be in argument list. Returns that builder, lets the ScriptEvaluator add the args if needed, and then that builder returns the correct
     undefined object.
      
     

  ,**/

  class Builder {
      ScriptEvaluator eval = ...;
      void setScriptEvaluator(ScriptEvaluator eval) { 
          this.eval = eval;
      }
      //This will be the default method for this in Builder.
      //Very few things will override it, but the define builder will!
      //Define builder will say, ok,
      //First below as usual, then see if I get added a varname, or a undefined function block.
      //If undefined var name, then eval the body to get the ScriptObject, and then
      //set the top environment with the name,value pair
      //If a undefined function block, then make a new function builder.
      //Add to that function builder the parameters from the undefined function block. (A list)
      //The addToken function now no longer parses and accepts each token, instead add to
      //function builder
      //Then get the top env, and add it to the BuilderFactory.
      //Done!
      //When the expression token looks in the env::BuilderFactory for the correct builder, it will find
      //it!
      ScriptEvaluator getEval() {
          return eval;
      }
      void addToken(Token token) {
          ScriptObject obj = eval.doParse(token);
          obj.accept(this);

      }
            
            
  }

  class DefineBuilder {
      FunctionBuilder functionBuilder = null;
      State currentState = new UnknownState();
      ScriptObject var = new NullScriptObj();
      String name = "";
      //Define builder will say, ok,
      //First below as usual, then see if I get added a varname, or a undefined function block.
      //If undefined var name, then eval the body to get the ScriptObject, and then
      //set the top environment with the name,value pair
      //If a undefined function block, then make a new function builder.
      //Add to that function builder the parameters from the undefined function block. (A list)
      //The addToken function now no longer parses and accepts each token, instead add to
      //function builder
      //Then get the top env, and add it to the BuilderFactory.
      //Done!
      //When the expression token looks in the env::BuilderFactory for the correct builder, it will find
      //it!
      void addToken(Token token) {
          if ( currentState.equals(new UnknownState()) || currentState.equals(new variableState()) ) {
              ScriptObject obj = eval.doParse(token);
              obj.accept(this);
          }
          else if (currentState.equals(new FunctionState())){
              functionBuilder.add(token);
          }
      }
      void addUndefinedFunction(UndefinedFunction f) {
          if ( currentState.equals(new UnknownState()) ) {
              currentState = new FunctionState();
              functionBuilder = new FunctionBuilder(f.getFunctionName(),f.getFunctionParameters());
          }
          else {
              this.setVar(f);
          }
      }
      void addUndefinedVariableObject(UndefinedVariable v) {
          if ( currentState.equals(new UnkownState()) ) {
              currentState = new VarState();
              name = v.getName();
          } else {
              this.setVar(v);
          }
      }
                

      void setVar(ScriptObject f) {
          //IF state is unknown, then set the state to error state,
          //IF state is var state, then set the var object to this.
          //IF state is function state, then go to error state.
          //If state is varFull state, then go to error state.
      }
      ScriptObject getResult() {
          //If state != varFullState, or function state, return errorState
          //Else perform the appropriate set, either set the BuilderFactory, or the map in the current environment
          //And return null script object..
      }
            
            
  }

  class EnvironmentList {
      ArrayList<Environment> environments = new ArrayList<Environment>();
      ScriptObject hasVariable(String name) {
          ListIterator li = environment.listIterator(environment.size());
          while(li.hasPrevious()) {
              Map<String,ScriptObject> vars = li.previous.getVars();
              if ( vars.get(name) != null ) {
                  return vars.get(name);
              }
          }
          return null;
      }

      Builder hasBuilder(String name) {
          ListIterator li = environment.listIterator(environment.size());
          while(li.hasPrevious()) {
              BuilderFactory b = li.previous.getBuilderFactory();
              if ( BuilderFactory.get(name) != null ) {
                  return BuilderFactory.get(name);
              }
          }
          return null;
      }

      void pushEnv(Environment env) {
          environments.add(env);
      }
      void popEnv() {
          environments.remove(environments.size()-1);
      }
      void addToTopEnv(String name, ScriptObject obj);
      void addToTopEnv(String name, Builder obj);
  }

  class Environment {
      BuilderFactory builder;
      Map<String,ScriptObject> vars;
      //Has getters for each.
  }
        

  class ScriptEvaluatorImp implements ScriptEvaluator {
      //Lots of stuff elidded
      //When looking up a variable, a function will start at the back of list,
      //And go through it, checking each one, and taking the first match. 
      //The first environment must be specially initialized with the BuilderFactory that has the
      //Correct special builders.
      EnvironmentList envList = new EnvironmentList();
      //The thing making the script evaluator must be smart enough to put the global env in.
      //A function, when it is first evaluated, needs to put a new frame into env, and then
      //On exit, pop a frame off of env.

      ArrayList<BuilderFactory>  = ...;

           
      ScriptObject doParse(Tokens token) {
          Builder builder = token.getBuilder(this);
              
          for (Token arg : token.getArgumentTokens()) {
              builder.addToken(this);
          }
          ScriptObject obj = builder.getResult();

          return obj;
      }
  }

  abstract class Token {
      abstract ArrayList<Token> getArguments();
      abstract Builder getBuilder(Assembler assembler);
  }

  class ExpressionToken extends Token {
      //...Lots of stuff elidded
      ArrayList<Token> getArguments(); //Return the sub expression
      //Tokens
      Builder getBuilder(Assembler assembler) {
          return BuilderFactory.getInstance().getBuilder(
              assembler,this.getFunctionString());
      }

  }

  class AtomToken extends Token {
      //This is the token for a literal
      ArrayList<Token> getArguments(); //Always returns
      //Empty list
      Builder getBuilder(Assembler assembler) { 
          return 
              BuilderFactory.getInstance().getLiteralBuilder(
                  assembler,this.value());
      }
  }

  class VariableToken extends Token {
      //This is the token for a variable
      ArrayList<Token> getArguments(); //Always returns
      //Empty list
      Builder getBuilder(Assembler assembler) { 
          return 
              BuilderFactory.getInstance().getVariableBuilder(
                  assembler,this.varName());
      }
  }


  class BuilderFactory {
      //singleton stuff

      //Paramatized factory
      Map<String,BuilderClassObjects> map;
  }
  //We will also most likely want a singleton to log errors!

#+END_SRC

**** UML

Currently, no options object.
Might want to  add in options object later.. Or it might be done at a higher level than this.


**** Builders we need
- LayoutBuilder   : Ervis   : Done
- DefineBuilder   : Matt    : Done
- FunctionBuilder : Matt    : Done

- CardBuilder :  Ian
- UndefinedFunctionBuilder : Matt : Done
- UndefinedVariableBuilder : Matt : Done
- ListBuilder : Ian 
- ConsBuilder : Brandon
- SizeBuilder : Brandon
- PositionScaledBuilder   : Brandon
- FamilyBuilder           : Matt  : Done
- VariableBuilder         : Matt  : Done
- ConstantBuilder         : Matt  : Done

- DecalBuilders 
  - ImageDecalBuilder :  Brandon
  - StringDecalBuilder : Brandon 
  - ShapeDecalBuilders      : Ervis   : Done
    - RectangleDecalBuilder : Ervis   : Done
    - CircleDecalBuilder    : Ervis   : Done
    - TriangleDecalBuilder  : Ervis   : Done
    - AnyShapeDecalBuilder  : Ervis   : Done
- EvalFileBuilder : Matt  : Done
- RenderBuilder   : Matt
** ScriptEvaluator
- After parsing script, can return a list of tuples, each tuple has front image, back image, card name. 
- Uses a strategy for parsing. 
- Will likely want an overall parser, and a per sexp parser that can be recursively called on argument.
  


*** Assembling strategy
- We want to handle various languages, but don't want to rewrite the code that assembles the objects together.
- Strategy will be the assembler
  - Context will be the parser
- Context will continue to parse
- Context will then call strategy with each function + arguments.
  - These functions + arguments should be agnostic of the language.
  - Local arguments, like (card (size 100 100) "foo" (leaf-layout white-rectangle) (leaf-layout white-rectangle)), each argument will be held locally, will call to strategy to initiate each 
  - arg, strategy will return that, then call strategy with cards + now initialized args. 
  - If defining, after calling strategy with to get the object, proceed to tell the strategy to store it. 

*** Assembling with builder!
- Allows one to create objects from the scripting langauge cleanly.
  - Context sees it is making something new, sees what it is making from function.
  - Token comparison will have to happen some how, although could avoid a hard coded comparison...
  - A FooBuilder is made. 
  - For each argument in foo, if it's a simple variable, grab it, if a new object as well, recursively run this to make it, and then....
  - We store things as a broad supertype for all available types.
  - This type then takes in the FooBuilder, and call the addAsArgMyType(this)
    #+BEGIN_SRC java
//Bar was made from the arguments
class BarType {
//...Ellided stuff

void acceptBuilder(Builder builder) {
   buildee.addAsArgMyType(this);
}
    
    #+END_SRC
  - When all arguments are in the builder, do builder.getScriptObject(), returning a script object. 
  - If the builder was given arguments that it couldn't work with, then it will return null.
  
  - Why go through all this hassle?
  - Then we can store all objects the script makes in a map of strings -> scriptobject.
  - And then, when we reference them to create another object, we can do it without casting!
  - It's essentially combing builder + visiter.
  - This is instead of an abstract factory!
    - Because an abstract Factory doesn't actually make that much sense!
    - We aren't switching between families of types!
    - Factory method could work better than that I think?. 
      
  - Builders can use state pattern!
    - Start at GenericLayout for example
    - Go to error state if someone tries passing a card in, or something
    - Go to leaf state if decal passed in, etc.
      
*** Both the above strategies work, and keep actually assembling the object separate from parsing.
- A different parser could probably use the same builders.
  - The director is the parser!
  - Sorta strange to swap out directors, rather than builders, but eh....
- Builder idea is my favorite


** InternalStructureManagement
- Abstract LayoutFactory
  - Gets input a layout, and the arguments to create layout.
  - Returns a layout for that. 
- DecalFactory
- Do the factories actually make sense?
- Only one family?
- Builder instead?



